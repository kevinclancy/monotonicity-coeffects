types
  LSet = typefun (x : TOSET) x |> Prop end;
  LMap = typefun (x : TOSET) (y : SEMILATTICE) x |> y end;
in

let equal =

	fun (A : TOSET) (x : A) (y : A)
		(bAnd 
		  (bNot (x < y)) 
		  (bNot (y < x)))
	end

and whenTrue = 

  fun (dest : SEMILATTICE) (cond : Prop) (res : dest)
      let extract to dest with k v acc = { unit -> cond : Unit |> Prop } in
		res
      end
  end

and lookup = 

  fun (K : TOSET) (V : SEMILATTICE) (d : K |> V) (k : K) @(+ d)
    let extract to V with k2 v acc = d
    in 
        case (equal !K k k2) to V of
        inl x -> v
        inr x -> (bot V)
    end
  end

and keySet =

    fun (K : TOSET) (V : SEMILATTICE) 
        hom (kv : LMap K V . (?K) * VDelta)
            let cap ? k = fst kv
            in { k -> known : LSet K }
            end
        end
    end

in
  (keySet !Nat !Nat {1 -> 2 , 43 -> 7 : LMap Nat Nat})
end