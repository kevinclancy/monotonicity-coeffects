types
  // a set of non-negative integers
  LPSet = Nat |> Prop;
in

let equal =

	fun (A : TOSET) (x : A) (y : A)
		(bAnd 
		  (bNot (x < y)) 
		  (bNot (y < x)))
	end

and mContains = 

  fun (n : Nat) 
    hom (s : LPSet . (?Nat) * Unit) 
      let cap ? n2 = fst s
      in
        case (equal !Nat n n2) to Prop of
        inl x -> known
        inr x -> unknown
      end
    end
  end

and mIntersect =

    fun (x : LPSet) 
        hom (y : LPSet . (?Nat) * Unit)
            let cap ? n = fst y
            in {n -> (mContains n x) : LPSet }
            end
        end
    end

and mProject =
    
    fun (p : Nat ->+ Prop)
        hom (d : LPSet . (?Nat) * Unit)
            let cap ? n = fst d
            in { n -> (p n) : LPSet }
            end
        end
    end

and mSize = 

    fun (x : LPSet) @(+ x)
        let extract to Nat with n v acc = x
        in (plus 1 acc)
        end
    end

// note that product would not make sense for lpset (unless we're talking about the divisibility semilattice)

and mSum =

    fun (x : LPSet) @(+ x)
        let extract to Nat with n v acc = x
        in (plus n acc)
        end
    end

in 
    // Output: 6
    (mSum { 1 -> known, 2 -> known, 3 -> known : LPSet })
end

