types
  LSet = typefun (x : TOSET) x |> Prop end;
in

let equal =

	fun (A : TOSET) (x : A) (y : A)
		(bAnd 
		  (bNot (x < y)) 
		  (bNot (y < x)))
	end

and whenTrue = 

  fun (dest : SEMILATTICE) (cond : Prop) (res : dest)
      let extract to dest with k v acc = { unit -> cond : Unit |> Prop } in
		res
      end
  end

and lookup = 

  fun (K : TOSET) (V : SEMILATTICE) (d : K |> V) (k : K) @(+ d)
    let extract to V with k2 v acc = d
    in 
        case (equal !K k k2) to V of
        inl x -> v
        inr x -> (bot V)
    end
  end

and intersect =

    fun (ElemTy : TOSET) (x : LSet ElemTy) 
        hom (y : LSet ElemTy . (?ElemTy) * Unit)
            let cap ? e = fst y
            in {e -> (lookup !ElemTy !Prop x e) : LSet ElemTy}
            end
        end
    end

// isn't this more of a select?
and project =
    
    fun (ElemTy : TOSET) (p : ElemTy ->+ Prop)
        hom (d : LSet ElemTy . (?ElemTy) * Unit)
            let cap ? e = fst d
            in { e -> (p e) : LSet ElemTy }
            end
        end
    end

and size = 

    fun (ElemTy : TOSET) (x : LSet ElemTy) @(+ x)
        let extract to Nat with n v acc = x
        in (plus 1 acc)
        end
    end

and product =

    fun (A : TOSET) (B : TOSET) (x : LSet A) (y : LSet B)
        ((hom (x : LSet A . (?A) * Unit) @(+ x)
            ((hom (y : LSet B . (?B) * Unit)
                let cap ? a = fst x
                and cap ? b = fst y
                in { (a , b) -> known : LSet (A * B) }
                end
            end) y)
        end) x)
    end

in 
    //(size !NatU { u1 -> known, u2 -> known, u3 -> known : LSet NatU })
    //(intersect !Nat { 1 -> known, 2 -> known : LSet Nat } { 1 -> known, 3 -> known : LSet Nat})
    (product !Nat !Nat { 1 -> known, 2 -> known : LSet Nat } { 1 -> known, 3 -> known : LSet Nat})
end

