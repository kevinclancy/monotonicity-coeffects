%{
open CheckComputation
open Ast
%}

%start start
%type < Ast.Prog > start
%start Ty
%type < Ast.Ty > Ty
%start ExprList
%type < Ast.Expr > ExprList

%token <string> ID CONST
%token <System.Int32> INT
%token <System.Int32> UINT
%token <System.Double> FLOAT
%token KNOWN UNKNOWN FUN COLON EQUAL 
%token BOT JOIN EXTRACT CONS IGET ISET LFST LSND
%token AT DOT PLUS MINUS QUESTION ASTERISK CARET LPAREN RPAREN LLBRACK RRBRACK IN LET END EOF FST SND COMMA OF CASE 
%token INL INR TO CAP UNCAP PIPE TYPES SEMICOLON LBRACK RBRACK BANG
%token HASH DICT TOSET POSET SEMILATTICE FORALL BIGFORALL IMPLIES ARROW
%token LSQUAREBRACKET RSQUAREBRACKET LARROW AND TYPEFUN COLONS WITH LESSTHAN HOM
%token HOLE

%right ARROW DICT PLUS ASTERISK CARET IMPLIES

%%

start: TYPES TypeAliasList IN Expr { { typeAliases = List.rev $2 ; exprAliases = Map.empty ;  body = $4 } }
     | Expr { { typeAliases = []; exprAliases = Map.empty ;  body = $1 } }

TypeAlias : ID EQUAL TyList SEMICOLON { ($1,$3) }
TypeAliasList : TypeAliasList TypeAlias { $2 :: $1 }
              | TypeAlias { [$1] }

ProperKindPrime : TOSET { Toset }
		        | POSET { Poset }
		        | SEMILATTICE { Semilattice }

ExprList : ExprList Expr { App($1,$2, parseState.ResultRange) }
		 | ExprList BANG Ty { ForallApp($1, $3, parseState.ResultRange) }
         | Expr { $1 }

LetList : ID EQUAL Expr IN Expr END { Let($1,$3,$5, parseState.ResultRange) }
        | ID EQUAL Expr AND LetList { Let($1,$3,$5,parseState.ResultRange) }
		| PIPE ID PIPE EQUAL Expr IN Expr END { IGet($2, $5, $7, parseState.ResultRange) }
		| PIPE ID PIPE EQUAL Expr AND LetList { IGet($2, $5, $7, parseState.ResultRange) }
		| EXTRACT TO TyList WITH ID ID ID EQUAL Expr IN Expr END { Extract($3,$5,$6,$7,$9,$11, parseState.ResultRange) }
		| EXTRACT TO TyList WITH ID ID ID EQUAL Expr AND LetList { Extract($3,$5,$6,$7,$9,$11, parseState.ResultRange) }
		| CAP Scalar ID EQUAL Expr IN Expr END { Uncap($2,$3,$5,$7, parseState.ResultRange) }
		| CAP Scalar ID EQUAL Expr AND LetList { Uncap($2,$3,$5,$7, parseState.ResultRange) }
        | LSQUAREBRACKET ID RSQUAREBRACKET LARROW Expr IN Expr END { MLet($2,$5,$7, parseState.ResultRange) }
        | LSQUAREBRACKET ID RSQUAREBRACKET LARROW Expr AND LetList { MLet($2,$5,$7, parseState.ResultRange) }

ForallParList : LPAREN ID COLON ProperKindPrime RPAREN ForallParList { ForallTy($2,$4,$6, parseState.ResultRange) }
              | TyList { $1 }

TypeParList : LPAREN ID COLON ProperKindPrime RPAREN TypeParList { TyOp($2,$4,$6, parseState.ResultRange) }
            | TyList { $1 }

ParList : LPAREN ID COLON TyList RPAREN ParList { Abs($2,$4,$6,parseState.ResultRange) }
        | LPAREN ID COLON ProperKindPrime RPAREN ParList { Forall($2,$4,$6, parseState.ResultRange) }
		| Expr { $1 }

EntryList : Expr ARROW Expr COMMA EntryList { Cons($1,$3,$5,parseState.ResultRange) }
          | Expr ARROW Expr COLON TyList RBRACK { Cons($1,$3,Bot($5, noRange), parseState.ResultRange) } 

CoeffectAscriptionList : CoeffectAscriptionList COMMA Scalar ID { ($3,$4) :: $1 }
					   | Scalar ID { [($1,$2)] }


Expr: INT                       { Int($1, parseState.ResultRange) }
    | UINT                      { UInt($1, parseState.ResultRange) }
	| KNOWN                     { Prop(PCF.Known, parseState.ResultRange) }
	| UNKNOWN                   { Prop(PCF.Unknown, parseState.ResultRange) }
	| FUN ParList END { $2 }
	| HOM LPAREN ID COLON TyList DOT TyList RPAREN Expr END { Hom($3, $5, $7, $9, parseState.ResultRange) }
	| LET LetList { $2 }
	| CONST { Const($1, parseState.ResultRange) }
	| ID { Var($1, parseState.ResultRange) }
	| LPAREN BOT TyList RPAREN { Bot($3, parseState.ResultRange) }
	| LPAREN JOIN Ty Expr Expr RPAREN { Join($3, $4, $5, parseState.ResultRange) }
	| LPAREN Expr LESSTHAN Expr RPAREN { LessThan($2,$4,parseState.ResultRange) }
	| CONS Expr Expr Expr { Cons($2, $3, $4, parseState.ResultRange) }
	| FST Expr { Fst($2, parseState.ResultRange) }
	| SND Expr { Snd($2, parseState.ResultRange) }
    | LFST Expr { LFst($2, parseState.ResultRange) }
    | LSND Expr { LSnd($2, parseState.ResultRange) }
	| LPAREN ExprList RPAREN { $2 }
	| LPAREN Expr COMMA Expr RPAREN { Pair($2, $4, parseState.ResultRange) }
    | LLBRACK Expr COMMA Expr RRBRACK { LexPair($2, $4, parseState.ResultRange) }
	| CASE Expr TO TyList OF INL ID ARROW Expr INR ID ARROW Expr 
	  { Case($2, $4, $7, $9, $11, $13, parseState.ResultRange) }
	| INL Ty Ty Expr { Inl($2,$3,$4, parseState.ResultRange) }
	| INR Ty Ty Expr { Inr($2,$3,$4, parseState.ResultRange) }
	| CAP Scalar Expr { Cap($2, $3, parseState.ResultRange) }
	| PIPE Expr PIPE { ISet($2, parseState.ResultRange) }
	| LSQUAREBRACKET Expr RSQUAREBRACKET { MRet($2, parseState.ResultRange) }
	| AT LPAREN CoeffectAscriptionList RPAREN Expr { CoeffectAscription($3, $5, parseState.ResultRange) } 
	| COLONS Ty Expr { TypeAscription($2,$3, parseState.ResultRange) }
	| LBRACK EntryList { $2 }
    | HOLE { Hole(parseState.ResultRange) }

Scalar: PLUS         { CoeffectMonotone }
      | MINUS        { CoeffectAntitone }
	  | ASTERISK     { CoeffectRobust }
	  | QUESTION     { CoeffectAny }

TyList : TyList Ty { TyApp($1,$2, parseState.ResultRange) }
       | Ty { $1 }

Ty: LPAREN Scalar TyList RPAREN { Capsule($3, $2, parseState.ResultRange) }
  | Ty ARROW Scalar Ty { FunTy($1,$3,$4, parseState.ResultRange) }
  | Ty DICT Ty { Dictionary($1,$3, parseState.ResultRange) }
  | Ty PLUS Ty { Sum($1,$3, parseState.ResultRange) }
  | Ty ASTERISK Ty { Prod($1,$3, parseState.ResultRange) }
  | Ty CARET Ty { LexProd($1, $3, parseState.ResultRange) }
  | PIPE TyList PIPE { IVar($2, parseState.ResultRange) }
  | LSQUAREBRACKET TyList RSQUAREBRACKET { Exception($2, parseState.ResultRange) }
  | ID { TyId($1, parseState.ResultRange) }
  | BIGFORALL ForallParList END { $2 }
  | TYPEFUN TypeParList END { $2 }
  | LPAREN TyList RPAREN { $2 } 