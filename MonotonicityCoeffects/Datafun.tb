types
  Bag = typefun (x : TOSET) x |> Nat end;
  MultiRel = typefun (src : TOSET) (dst : TOSET) (src * dst) |> Nat end;
  Bool = Unit + Unit;
in

let equal =

	fun (A : TOSET) (x : A) (y : A)
		(bAnd 
		  (bNot (x < y)) 
		  (bNot (y < x)))
	end

and monoIf = 

  fun (src : SEMILATTICE) (dest : SEMILATTICE) (cond : src) (res : dest)
      let extract to dest with k v acc = cons unit cond (bot (Unit |> src)) in
		res
      end
  end

and map =

	fun (srcElem : TOSET) (destElem : TOSET) 
		(f : srcElem ->? destElem)
		(bag : Bag srcElem) :: (Bag destElem) @(+ bag)
		let extract to (Bag destElem) with e m acc = bag
		in (cons (f e) m acc) 
		end
	end

and lookup = 

  fun (K : TOSET) (V : SEMILATTICE) (d : K |> V) (k : K) @(+ d)
    let extract to V with k2 v acc = d
    in 
        case (equal !K k k2) to V of
        inl x -> v
        inr x -> (bot V)
    end
  end

and filter =

  fun (elemTy : TOSET) (f : elemTy ->? Nat ->+ Prop) (bag : Bag elemTy)
      :: (Bag elemTy) @(+ f, + bag)
		let extract to (Bag elemTy) with e m acc = bag
		and m2 = (monoIf !Prop !Nat (f e m) m)
		in (cons e m2 acc)  
		end	
  end

and comp =
	fun (A : TOSET) (B : TOSET) (C : TOSET)
		(x : MultiRel A B) (y : MultiRel B C) :: (MultiRel A C) @(+ x, + y)
		let extract to (MultiRel A C) with ab m1 acc1 = x
	    and extract to (MultiRel A C) with bc m2 acc2 = y 
		and a = fst ab
		and b1 = snd ab
		and b2 = fst bc
		and c = snd bc
		and m3 = 
            case (equal !B b1 b2) to Nat of 
            inl x -> (mult m1 m2)
            inr x -> (bot Nat)
		in { (a,c) -> (plus (lookup !(A * C) !Nat acc1 (a,c)) m3)  : MultiRel A C }
		end
	end

in
    //(lookup !(Nat*Nat) !Nat
    //  (comp !Nat !Nat !Nat
    //         {(1,4) -> 2 : MultiRel Nat Nat}
    //         {(3,2) -> 5, (4,2) -> 2 : MultiRel Nat Nat})
    //  (1,2))
    //{ (1,4) -> 2, (2,3) -> 4, (1,3) -> 2 : (MultiRel Nat Nat) }
	(comp !Nat !Nat !Nat
	      { (1,3) -> 2, (2,3) -> 4,  (1,4) -> 2 : (MultiRel Nat Nat) } 
	      { (3,2) -> 5, (4,2) -> 2 : (MultiRel Nat Nat) })
end


