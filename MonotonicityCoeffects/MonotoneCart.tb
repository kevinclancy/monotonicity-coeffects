types
  Set = typefun (x : TOSET) x |> Prop end;
  ActionId = Nat;
  ItemId = Nat;
  NetworkAddr = Nat;
  Action = ItemId + ItemId;
  Checkout = (ActionId * ActionId) * NetworkAddr;
  Cart = | Checkout | * (Set (ActionId * Action));
in

let add =
 fun (x : ItemId) :: Action
   inl ItemId ItemId x
 end
and remove = 
 fun (x : ItemId) :: Action
   inr ItemId ItemId x
 end
and monoIf = 

  fun (src : SEMILATTICE) (dest : SEMILATTICE) (cond : src) (res : dest)
      let extract to dest with k v acc = cons unit cond (bot (Unit |> src)) in
		res
      end
  end

and setCount =

	fun (elemTy : TOSET) (s : Set elemTy)
		let extract to Nat with key val acc = s in
			(plus acc 1)
		end
	end	

and isComplete =

	fun (cart : Cart) :: [Prop] @(+ cart)
		let iCheckout = fst cart 
		and actions = snd cart
		and | checkout | = iCheckout
		and rng = fst checkout 
		and addr = snd checkout
		and lo = fst rng 
		and hi = snd rng
		and setIds =
			let extract to (Set ActionId) with idAction isMember seen = actions
			and id = fst idAction 
			and act = snd idAction in
				(monoIf !Prop !(Set ActionId) (pAnd (leq lo id) (leq id hi)) { id -> known : (Set ActionId) })
			end
		in
			let numIds = (setCount !ActionId setIds) in
				(geq numIds (plus 1 (minus hi lo)))
			end
		end
	end

and swap =

    fun (action : Action)
        case action to Action of 
        inl x -> inr ItemId ItemId x
        inr x -> inl ItemId ItemId x
    end

in
	let co = | ((4,6), 1337) | 
	and actions = { (4, (swap (add 40))) -> known , (5, (remove 50)) -> known, (6, (add 20)) -> known : (ActionId*Action) |> Prop }
	and ic = (isComplete (co, actions))
    and [ x ] <- ic  
    and [ y ] <- ic
    in [ (monoIf !Prop !Nat x (plus 3 4)) ]
    end
end