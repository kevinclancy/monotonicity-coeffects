types
  Set = typefun (x : TOSET) x |> Prop end;
  NodeId = Nat;
  NodeSet = Set NodeId;
  Graph = NodeId |> NodeSet;
in

let equal =

	fun (A : TOSET) (x : A) (y : A)
		(bAnd 
		  (bNot (x < y)) 
		  (bNot (y < x)))
	end

and monoIf = 

  fun (src : SEMILATTICE) (dest : SEMILATTICE) (cond : src) (res : dest)
      let extract to dest with k v acc = { unit -> cond : Unit |> src } in
		res
      end
  end

and lookup = 

  fun (K : TOSET) (V : SEMILATTICE) (d : K |> V) (k : K) @(+ d)
    let extract to V with k2 v acc = d
    in 
        case (equal !K k k2) to V of
        inl x -> v
        inr x -> (bot V)
    end
  end


and neighbors =
  
  fun (g : Graph) 
    hom (x : NodeSet . (?Nat)*Unit)
      // when we extract the natural number n from a ?-capsule, we can use n 
      // arbitrarily, while still using the capsule (fst x) monotonically
      let cap ? n = fst x 
      in (lookup !NodeId !NodeSet g n)
      end
    end
  end 

and graph =
 
  {
    1 -> { 2 -> known, 3 -> known : NodeSet },
    2 -> { 4 -> known, 5 -> known : NodeSet },
    6 -> { 7 -> known, 3 -> known : NodeSet },
    8 -> { 9 -> known, 10 -> known : NodeSet }
    : Graph
  }

in
 (neighbors graph { 1 -> known , 8 -> known : NodeSet })
end