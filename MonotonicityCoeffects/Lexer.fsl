{
module Lexer

// SUPER IMPORTANT SUPER IMPORTANT SUPER IMPORTANT
// Don't forget to run fslex with --unicode. Otherwise
// you will get confusing errors.

// Opens methods related to fslex.exe
open Microsoft.FSharp.Text.Lexing
open Parser
open System
open System.Text

let newline (lexbuf : LexBuffer<_>) = lexbuf.EndPos <- lexbuf.EndPos.NextLine in

let lexeme lexbuf = LexBuffer<byte>.LexemeString lexbuf in

}

let digit = ['0'-'9']
let whitespace = [' ' '\t' ]
let newline = ('\n' | '\r' '\n')

rule token = parse
| newline        { newline lexbuf; token lexbuf }
| whitespace     { token lexbuf }
| "known"         { KNOWN }
| "unknown"       { UNKNOWN }
| "fun"          { FUN }
| "hom"          { HOM }
| "with"         { WITH }
| "forall"       { FORALL }
| "Forall"       { BIGFORALL }
| "typefun"      { TYPEFUN }
| ":"            { COLON }
| "::"			 { COLONS }
| ";"            { SEMICOLON }
| "types"        { TYPES }
| "TOSET"        { TOSET }
| "POSET"        { POSET }
| "SEMILATTICE"  { SEMILATTICE }
| "{"            { LBRACK }
| "}"            { RBRACK }
| "="            { EQUAL }
| "!"            { BANG }
| "@"			 { AT }
| "##"           { HOLE }
| "."	         { DOT }
| "of"			 { OF }
| "to"			 { TO }
| "["            { LSQUAREBRACKET }
| "]"            { RSQUAREBRACKET }
| "|>"           { DICT }
| "<"            { LESSTHAN }
| "#"            { HASH }
| "|"            { PIPE }
| "case"		 { CASE }
| "->"           { ARROW }
| "<-"           { LARROW }
| "=>"           { IMPLIES }
| "cap"          { CAP }
| "uncap"        { UNCAP }
| ","		     { COMMA }
| "+"            { PLUS }
| "-"            { MINUS }
| "fst"          { FST }
| "snd"          { SND }
| "inl"          { INL }
| "inr"          { INR }
| "iget"         { IGET }
| "iset"         { ISET }
| "extract"      { EXTRACT }
| "cons"         { CONS }
| "bot"          { BOT }
| "join"         { JOIN }
| "?"            { QUESTION }
| "*"            { ASTERISK }
| "("            { LPAREN}
| ")"            { RPAREN }
| "in"           { IN }
| "and"          { AND }
| "let"          { LET }
| "end"			 { END }
| ("//")     { comment lexbuf }
| ['u']digit+ { UINT(Int32.Parse((lexeme lexbuf).Substring(1))) }
| 'K''-'['a'-'z''A'-'Z']+ { CONST(lexeme lexbuf) }
| ['a'-'z''A'-'Z']['a'-'z''A'-'Z''1'-'9']*     { ID(lexeme lexbuf) }
| ['-']?digit+   { INT (Int32.Parse(lexeme lexbuf)) }
| ['-']?digit+('.'digit+)?(['e''E']digit+)?   { FLOAT (Double.Parse(lexeme lexbuf)) }
| eof            { EOF }

and comment = parse
| newline { newline lexbuf ; token lexbuf }
| _ { comment lexbuf }