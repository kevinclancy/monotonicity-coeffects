// Implementation file for parser generated by fsyacc
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open Microsoft.FSharp.Text.Lexing
open Microsoft.FSharp.Text.Parsing.ParseHelpers
# 1 "Parser.fsy"

open Ast

# 9 "Parser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | LSQUAREBRACKET
  | RSQUAREBRACKET
  | LARROW
  | HASH
  | DICT
  | TOSET
  | PROSET
  | SEMILATTICE
  | FORALL
  | BIGFORALL
  | IMPLIES
  | ARROW
  | INL
  | INR
  | TO
  | CAP
  | UNCAP
  | PIPE
  | TYPES
  | SEMICOLON
  | LBRACK
  | RBRACK
  | BANG
  | AT
  | DOT
  | PLUS
  | MINUS
  | QUESTION
  | ASTERISK
  | LPAREN
  | RPAREN
  | IN
  | LET
  | END
  | EOF
  | FST
  | SND
  | COMMA
  | OF
  | CASE
  | BOT
  | JOIN
  | EXTRACT
  | CONS
  | IGET
  | ISET
  | TRUE
  | FALSE
  | FUN
  | COLON
  | EQUAL
  | FLOAT of (System.Double)
  | INT of (System.Int32)
  | ID of (string)
  | CONST of (string)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_LSQUAREBRACKET
    | TOKEN_RSQUAREBRACKET
    | TOKEN_LARROW
    | TOKEN_HASH
    | TOKEN_DICT
    | TOKEN_TOSET
    | TOKEN_PROSET
    | TOKEN_SEMILATTICE
    | TOKEN_FORALL
    | TOKEN_BIGFORALL
    | TOKEN_IMPLIES
    | TOKEN_ARROW
    | TOKEN_INL
    | TOKEN_INR
    | TOKEN_TO
    | TOKEN_CAP
    | TOKEN_UNCAP
    | TOKEN_PIPE
    | TOKEN_TYPES
    | TOKEN_SEMICOLON
    | TOKEN_LBRACK
    | TOKEN_RBRACK
    | TOKEN_BANG
    | TOKEN_AT
    | TOKEN_DOT
    | TOKEN_PLUS
    | TOKEN_MINUS
    | TOKEN_QUESTION
    | TOKEN_ASTERISK
    | TOKEN_LPAREN
    | TOKEN_RPAREN
    | TOKEN_IN
    | TOKEN_LET
    | TOKEN_END
    | TOKEN_EOF
    | TOKEN_FST
    | TOKEN_SND
    | TOKEN_COMMA
    | TOKEN_OF
    | TOKEN_CASE
    | TOKEN_BOT
    | TOKEN_JOIN
    | TOKEN_EXTRACT
    | TOKEN_CONS
    | TOKEN_IGET
    | TOKEN_ISET
    | TOKEN_TRUE
    | TOKEN_FALSE
    | TOKEN_FUN
    | TOKEN_COLON
    | TOKEN_EQUAL
    | TOKEN_FLOAT
    | TOKEN_INT
    | TOKEN_ID
    | TOKEN_CONST
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startTy
    | NONTERM__startstart
    | NONTERM_start
    | NONTERM_TypeAlias
    | NONTERM_TypeAliasList
    | NONTERM_ProperKindPrime
    | NONTERM_ProperKind
    | NONTERM_Kind
    | NONTERM_ExprList
    | NONTERM_Expr
    | NONTERM_Scalar
    | NONTERM_Ty

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | LSQUAREBRACKET  -> 0 
  | RSQUAREBRACKET  -> 1 
  | LARROW  -> 2 
  | HASH  -> 3 
  | DICT  -> 4 
  | TOSET  -> 5 
  | PROSET  -> 6 
  | SEMILATTICE  -> 7 
  | FORALL  -> 8 
  | BIGFORALL  -> 9 
  | IMPLIES  -> 10 
  | ARROW  -> 11 
  | INL  -> 12 
  | INR  -> 13 
  | TO  -> 14 
  | CAP  -> 15 
  | UNCAP  -> 16 
  | PIPE  -> 17 
  | TYPES  -> 18 
  | SEMICOLON  -> 19 
  | LBRACK  -> 20 
  | RBRACK  -> 21 
  | BANG  -> 22 
  | AT  -> 23 
  | DOT  -> 24 
  | PLUS  -> 25 
  | MINUS  -> 26 
  | QUESTION  -> 27 
  | ASTERISK  -> 28 
  | LPAREN  -> 29 
  | RPAREN  -> 30 
  | IN  -> 31 
  | LET  -> 32 
  | END  -> 33 
  | EOF  -> 34 
  | FST  -> 35 
  | SND  -> 36 
  | COMMA  -> 37 
  | OF  -> 38 
  | CASE  -> 39 
  | BOT  -> 40 
  | JOIN  -> 41 
  | EXTRACT  -> 42 
  | CONS  -> 43 
  | IGET  -> 44 
  | ISET  -> 45 
  | TRUE  -> 46 
  | FALSE  -> 47 
  | FUN  -> 48 
  | COLON  -> 49 
  | EQUAL  -> 50 
  | FLOAT _ -> 51 
  | INT _ -> 52 
  | ID _ -> 53 
  | CONST _ -> 54 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_LSQUAREBRACKET 
  | 1 -> TOKEN_RSQUAREBRACKET 
  | 2 -> TOKEN_LARROW 
  | 3 -> TOKEN_HASH 
  | 4 -> TOKEN_DICT 
  | 5 -> TOKEN_TOSET 
  | 6 -> TOKEN_PROSET 
  | 7 -> TOKEN_SEMILATTICE 
  | 8 -> TOKEN_FORALL 
  | 9 -> TOKEN_BIGFORALL 
  | 10 -> TOKEN_IMPLIES 
  | 11 -> TOKEN_ARROW 
  | 12 -> TOKEN_INL 
  | 13 -> TOKEN_INR 
  | 14 -> TOKEN_TO 
  | 15 -> TOKEN_CAP 
  | 16 -> TOKEN_UNCAP 
  | 17 -> TOKEN_PIPE 
  | 18 -> TOKEN_TYPES 
  | 19 -> TOKEN_SEMICOLON 
  | 20 -> TOKEN_LBRACK 
  | 21 -> TOKEN_RBRACK 
  | 22 -> TOKEN_BANG 
  | 23 -> TOKEN_AT 
  | 24 -> TOKEN_DOT 
  | 25 -> TOKEN_PLUS 
  | 26 -> TOKEN_MINUS 
  | 27 -> TOKEN_QUESTION 
  | 28 -> TOKEN_ASTERISK 
  | 29 -> TOKEN_LPAREN 
  | 30 -> TOKEN_RPAREN 
  | 31 -> TOKEN_IN 
  | 32 -> TOKEN_LET 
  | 33 -> TOKEN_END 
  | 34 -> TOKEN_EOF 
  | 35 -> TOKEN_FST 
  | 36 -> TOKEN_SND 
  | 37 -> TOKEN_COMMA 
  | 38 -> TOKEN_OF 
  | 39 -> TOKEN_CASE 
  | 40 -> TOKEN_BOT 
  | 41 -> TOKEN_JOIN 
  | 42 -> TOKEN_EXTRACT 
  | 43 -> TOKEN_CONS 
  | 44 -> TOKEN_IGET 
  | 45 -> TOKEN_ISET 
  | 46 -> TOKEN_TRUE 
  | 47 -> TOKEN_FALSE 
  | 48 -> TOKEN_FUN 
  | 49 -> TOKEN_COLON 
  | 50 -> TOKEN_EQUAL 
  | 51 -> TOKEN_FLOAT 
  | 52 -> TOKEN_INT 
  | 53 -> TOKEN_ID 
  | 54 -> TOKEN_CONST 
  | 57 -> TOKEN_end_of_input
  | 55 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startTy 
    | 1 -> NONTERM__startstart 
    | 2 -> NONTERM_start 
    | 3 -> NONTERM_start 
    | 4 -> NONTERM_TypeAlias 
    | 5 -> NONTERM_TypeAliasList 
    | 6 -> NONTERM_TypeAliasList 
    | 7 -> NONTERM_ProperKindPrime 
    | 8 -> NONTERM_ProperKindPrime 
    | 9 -> NONTERM_ProperKindPrime 
    | 10 -> NONTERM_ProperKind 
    | 11 -> NONTERM_Kind 
    | 12 -> NONTERM_Kind 
    | 13 -> NONTERM_ExprList 
    | 14 -> NONTERM_ExprList 
    | 15 -> NONTERM_ExprList 
    | 16 -> NONTERM_Expr 
    | 17 -> NONTERM_Expr 
    | 18 -> NONTERM_Expr 
    | 19 -> NONTERM_Expr 
    | 20 -> NONTERM_Expr 
    | 21 -> NONTERM_Expr 
    | 22 -> NONTERM_Expr 
    | 23 -> NONTERM_Expr 
    | 24 -> NONTERM_Expr 
    | 25 -> NONTERM_Expr 
    | 26 -> NONTERM_Expr 
    | 27 -> NONTERM_Expr 
    | 28 -> NONTERM_Expr 
    | 29 -> NONTERM_Expr 
    | 30 -> NONTERM_Expr 
    | 31 -> NONTERM_Expr 
    | 32 -> NONTERM_Expr 
    | 33 -> NONTERM_Expr 
    | 34 -> NONTERM_Expr 
    | 35 -> NONTERM_Expr 
    | 36 -> NONTERM_Expr 
    | 37 -> NONTERM_Expr 
    | 38 -> NONTERM_Expr 
    | 39 -> NONTERM_Expr 
    | 40 -> NONTERM_Scalar 
    | 41 -> NONTERM_Scalar 
    | 42 -> NONTERM_Scalar 
    | 43 -> NONTERM_Scalar 
    | 44 -> NONTERM_Ty 
    | 45 -> NONTERM_Ty 
    | 46 -> NONTERM_Ty 
    | 47 -> NONTERM_Ty 
    | 48 -> NONTERM_Ty 
    | 49 -> NONTERM_Ty 
    | 50 -> NONTERM_Ty 
    | 51 -> NONTERM_Ty 
    | 52 -> NONTERM_Ty 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 57 
let _fsyacc_tagOfErrorTerminal = 55

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | LSQUAREBRACKET  -> "LSQUAREBRACKET" 
  | RSQUAREBRACKET  -> "RSQUAREBRACKET" 
  | LARROW  -> "LARROW" 
  | HASH  -> "HASH" 
  | DICT  -> "DICT" 
  | TOSET  -> "TOSET" 
  | PROSET  -> "PROSET" 
  | SEMILATTICE  -> "SEMILATTICE" 
  | FORALL  -> "FORALL" 
  | BIGFORALL  -> "BIGFORALL" 
  | IMPLIES  -> "IMPLIES" 
  | ARROW  -> "ARROW" 
  | INL  -> "INL" 
  | INR  -> "INR" 
  | TO  -> "TO" 
  | CAP  -> "CAP" 
  | UNCAP  -> "UNCAP" 
  | PIPE  -> "PIPE" 
  | TYPES  -> "TYPES" 
  | SEMICOLON  -> "SEMICOLON" 
  | LBRACK  -> "LBRACK" 
  | RBRACK  -> "RBRACK" 
  | BANG  -> "BANG" 
  | AT  -> "AT" 
  | DOT  -> "DOT" 
  | PLUS  -> "PLUS" 
  | MINUS  -> "MINUS" 
  | QUESTION  -> "QUESTION" 
  | ASTERISK  -> "ASTERISK" 
  | LPAREN  -> "LPAREN" 
  | RPAREN  -> "RPAREN" 
  | IN  -> "IN" 
  | LET  -> "LET" 
  | END  -> "END" 
  | EOF  -> "EOF" 
  | FST  -> "FST" 
  | SND  -> "SND" 
  | COMMA  -> "COMMA" 
  | OF  -> "OF" 
  | CASE  -> "CASE" 
  | BOT  -> "BOT" 
  | JOIN  -> "JOIN" 
  | EXTRACT  -> "EXTRACT" 
  | CONS  -> "CONS" 
  | IGET  -> "IGET" 
  | ISET  -> "ISET" 
  | TRUE  -> "TRUE" 
  | FALSE  -> "FALSE" 
  | FUN  -> "FUN" 
  | COLON  -> "COLON" 
  | EQUAL  -> "EQUAL" 
  | FLOAT _ -> "FLOAT" 
  | INT _ -> "INT" 
  | ID _ -> "ID" 
  | CONST _ -> "CONST" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | LSQUAREBRACKET  -> (null : System.Object) 
  | RSQUAREBRACKET  -> (null : System.Object) 
  | LARROW  -> (null : System.Object) 
  | HASH  -> (null : System.Object) 
  | DICT  -> (null : System.Object) 
  | TOSET  -> (null : System.Object) 
  | PROSET  -> (null : System.Object) 
  | SEMILATTICE  -> (null : System.Object) 
  | FORALL  -> (null : System.Object) 
  | BIGFORALL  -> (null : System.Object) 
  | IMPLIES  -> (null : System.Object) 
  | ARROW  -> (null : System.Object) 
  | INL  -> (null : System.Object) 
  | INR  -> (null : System.Object) 
  | TO  -> (null : System.Object) 
  | CAP  -> (null : System.Object) 
  | UNCAP  -> (null : System.Object) 
  | PIPE  -> (null : System.Object) 
  | TYPES  -> (null : System.Object) 
  | SEMICOLON  -> (null : System.Object) 
  | LBRACK  -> (null : System.Object) 
  | RBRACK  -> (null : System.Object) 
  | BANG  -> (null : System.Object) 
  | AT  -> (null : System.Object) 
  | DOT  -> (null : System.Object) 
  | PLUS  -> (null : System.Object) 
  | MINUS  -> (null : System.Object) 
  | QUESTION  -> (null : System.Object) 
  | ASTERISK  -> (null : System.Object) 
  | LPAREN  -> (null : System.Object) 
  | RPAREN  -> (null : System.Object) 
  | IN  -> (null : System.Object) 
  | LET  -> (null : System.Object) 
  | END  -> (null : System.Object) 
  | EOF  -> (null : System.Object) 
  | FST  -> (null : System.Object) 
  | SND  -> (null : System.Object) 
  | COMMA  -> (null : System.Object) 
  | OF  -> (null : System.Object) 
  | CASE  -> (null : System.Object) 
  | BOT  -> (null : System.Object) 
  | JOIN  -> (null : System.Object) 
  | EXTRACT  -> (null : System.Object) 
  | CONS  -> (null : System.Object) 
  | IGET  -> (null : System.Object) 
  | ISET  -> (null : System.Object) 
  | TRUE  -> (null : System.Object) 
  | FALSE  -> (null : System.Object) 
  | FUN  -> (null : System.Object) 
  | COLON  -> (null : System.Object) 
  | EQUAL  -> (null : System.Object) 
  | FLOAT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | INT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | ID _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | CONST _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us; 65535us; 0us; 65535us; 1us; 65535us; 2us; 3us; 2us; 65535us; 4us; 15us; 13us; 14us; 1us; 65535us; 4us; 5us; 1us; 65535us; 49us; 19us; 1us; 65535us; 49us; 50us; 0us; 65535us; 1us; 65535us; 27us; 20us; 32us; 65535us; 2us; 8us; 6us; 7us; 20us; 21us; 27us; 24us; 33us; 34us; 38us; 39us; 40us; 41us; 51us; 52us; 55us; 56us; 56us; 57us; 58us; 59us; 59us; 60us; 60us; 61us; 62us; 63us; 64us; 65us; 67us; 68us; 70us; 71us; 77us; 78us; 81us; 82us; 85us; 86us; 89us; 90us; 92us; 93us; 97us; 98us; 99us; 100us; 101us; 102us; 106us; 107us; 108us; 109us; 116us; 117us; 118us; 119us; 124us; 125us; 126us; 127us; 128us; 129us; 5us; 65535us; 28us; 29us; 91us; 92us; 94us; 95us; 140us; 141us; 149us; 150us; 20us; 65535us; 0us; 1us; 10us; 11us; 22us; 23us; 31us; 32us; 45us; 46us; 54us; 55us; 72us; 73us; 83us; 84us; 84us; 85us; 87us; 88us; 88us; 89us; 111us; 112us; 132us; 146us; 135us; 147us; 139us; 140us; 150us; 144us; 151us; 145us; 152us; 146us; 153us; 147us; 154us; 148us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 2us; 4us; 7us; 9us; 11us; 13us; 14us; 16us; 49us; 55us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 5us; 0us; 47us; 48us; 49us; 50us; 1us; 1us; 1us; 1us; 1us; 2us; 2us; 2us; 5us; 1us; 2us; 1us; 2us; 1us; 3us; 1us; 4us; 1us; 4us; 5us; 4us; 47us; 48us; 49us; 50us; 1us; 4us; 1us; 5us; 1us; 5us; 1us; 6us; 1us; 7us; 1us; 8us; 1us; 9us; 1us; 10us; 3us; 13us; 14us; 28us; 1us; 13us; 1us; 14us; 5us; 14us; 47us; 48us; 49us; 50us; 2us; 15us; 29us; 1us; 16us; 1us; 17us; 4us; 18us; 23us; 28us; 29us; 1us; 18us; 1us; 18us; 1us; 18us; 1us; 18us; 5us; 18us; 47us; 48us; 49us; 50us; 1us; 18us; 1us; 18us; 1us; 18us; 5us; 19us; 34us; 36us; 37us; 38us; 1us; 19us; 1us; 19us; 1us; 19us; 1us; 19us; 1us; 19us; 1us; 19us; 1us; 20us; 1us; 21us; 1us; 22us; 5us; 22us; 47us; 48us; 49us; 50us; 1us; 23us; 1us; 23us; 1us; 23us; 1us; 23us; 1us; 23us; 1us; 23us; 1us; 23us; 1us; 24us; 5us; 24us; 47us; 48us; 49us; 50us; 1us; 24us; 1us; 24us; 1us; 25us; 1us; 25us; 1us; 25us; 1us; 25us; 1us; 26us; 1us; 26us; 1us; 27us; 1us; 27us; 1us; 28us; 1us; 29us; 1us; 29us; 1us; 29us; 1us; 30us; 1us; 30us; 1us; 30us; 5us; 30us; 47us; 48us; 49us; 50us; 1us; 30us; 1us; 30us; 1us; 30us; 1us; 30us; 1us; 30us; 1us; 30us; 1us; 30us; 1us; 30us; 1us; 30us; 1us; 31us; 5us; 31us; 47us; 48us; 49us; 50us; 5us; 31us; 47us; 48us; 49us; 50us; 1us; 31us; 1us; 32us; 5us; 32us; 47us; 48us; 49us; 50us; 5us; 32us; 47us; 48us; 49us; 50us; 1us; 32us; 1us; 33us; 1us; 33us; 1us; 33us; 1us; 34us; 1us; 34us; 1us; 34us; 1us; 34us; 1us; 34us; 1us; 34us; 1us; 34us; 1us; 35us; 1us; 35us; 1us; 36us; 1us; 36us; 1us; 36us; 1us; 36us; 1us; 36us; 1us; 36us; 1us; 36us; 1us; 36us; 1us; 37us; 5us; 37us; 47us; 48us; 49us; 50us; 1us; 37us; 1us; 37us; 1us; 37us; 1us; 37us; 1us; 37us; 1us; 37us; 1us; 37us; 1us; 37us; 1us; 38us; 1us; 38us; 1us; 38us; 1us; 38us; 1us; 38us; 1us; 38us; 1us; 38us; 1us; 39us; 1us; 39us; 1us; 39us; 1us; 40us; 2us; 40us; 49us; 1us; 41us; 1us; 42us; 2us; 42us; 50us; 1us; 43us; 1us; 44us; 1us; 44us; 2us; 45us; 46us; 6us; 45us; 46us; 47us; 48us; 49us; 50us; 1us; 45us; 1us; 45us; 1us; 46us; 5us; 47us; 47us; 48us; 49us; 50us; 5us; 47us; 48us; 48us; 49us; 50us; 5us; 47us; 48us; 49us; 49us; 50us; 5us; 47us; 48us; 49us; 50us; 50us; 5us; 47us; 48us; 49us; 50us; 51us; 1us; 47us; 1us; 47us; 1us; 48us; 1us; 49us; 1us; 50us; 1us; 51us; 1us; 51us; 1us; 52us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 8us; 10us; 12us; 14us; 17us; 19us; 21us; 23us; 25us; 27us; 33us; 35us; 37us; 39us; 41us; 43us; 45us; 47us; 49us; 53us; 55us; 57us; 63us; 66us; 68us; 70us; 75us; 77us; 79us; 81us; 83us; 89us; 91us; 93us; 95us; 101us; 103us; 105us; 107us; 109us; 111us; 113us; 115us; 117us; 119us; 125us; 127us; 129us; 131us; 133us; 135us; 137us; 139us; 141us; 147us; 149us; 151us; 153us; 155us; 157us; 159us; 161us; 163us; 165us; 167us; 169us; 171us; 173us; 175us; 177us; 179us; 181us; 187us; 189us; 191us; 193us; 195us; 197us; 199us; 201us; 203us; 205us; 207us; 213us; 219us; 221us; 223us; 229us; 235us; 237us; 239us; 241us; 243us; 245us; 247us; 249us; 251us; 253us; 255us; 257us; 259us; 261us; 263us; 265us; 267us; 269us; 271us; 273us; 275us; 277us; 279us; 285us; 287us; 289us; 291us; 293us; 295us; 297us; 299us; 301us; 303us; 305us; 307us; 309us; 311us; 313us; 315us; 317us; 319us; 321us; 323us; 326us; 328us; 330us; 333us; 335us; 337us; 339us; 342us; 349us; 351us; 353us; 355us; 361us; 367us; 373us; 379us; 385us; 387us; 389us; 391us; 393us; 395us; 397us; 399us; |]
let _fsyacc_action_rows = 157
let _fsyacc_actionTableElements = [|4us; 32768us; 3us; 137us; 17us; 154us; 29us; 139us; 53us; 156us; 4us; 49152us; 4us; 151us; 11us; 149us; 25us; 152us; 28us; 153us; 18us; 32768us; 0us; 128us; 12us; 83us; 13us; 87us; 15us; 91us; 18us; 4us; 29us; 27us; 32us; 36us; 35us; 62us; 36us; 64us; 39us; 70us; 40us; 45us; 41us; 54us; 43us; 58us; 45us; 101us; 51us; 26us; 52us; 25us; 53us; 44us; 54us; 43us; 0us; 49152us; 1us; 32768us; 53us; 9us; 2us; 32768us; 19us; 13us; 31us; 6us; 17us; 32768us; 0us; 128us; 12us; 83us; 13us; 87us; 15us; 91us; 29us; 27us; 32us; 36us; 35us; 62us; 36us; 64us; 39us; 70us; 40us; 45us; 41us; 54us; 43us; 58us; 45us; 101us; 51us; 26us; 52us; 25us; 53us; 44us; 54us; 43us; 0us; 16386us; 0us; 16387us; 1us; 32768us; 50us; 10us; 4us; 32768us; 3us; 137us; 17us; 154us; 29us; 139us; 53us; 156us; 5us; 32768us; 4us; 151us; 11us; 149us; 19us; 12us; 25us; 152us; 28us; 153us; 0us; 16388us; 1us; 32768us; 53us; 9us; 0us; 16389us; 0us; 16390us; 0us; 16391us; 0us; 16392us; 0us; 16393us; 0us; 16394us; 19us; 32768us; 0us; 128us; 12us; 83us; 13us; 87us; 15us; 91us; 22us; 22us; 29us; 27us; 30us; 66us; 32us; 36us; 35us; 62us; 36us; 64us; 39us; 70us; 40us; 45us; 41us; 54us; 43us; 58us; 45us; 101us; 51us; 26us; 52us; 25us; 53us; 44us; 54us; 43us; 0us; 16397us; 4us; 32768us; 3us; 137us; 17us; 154us; 29us; 139us; 53us; 156us; 4us; 16398us; 4us; 151us; 11us; 149us; 25us; 152us; 28us; 153us; 1us; 16399us; 37us; 67us; 0us; 16400us; 0us; 16401us; 19us; 32768us; 0us; 128us; 8us; 47us; 12us; 83us; 13us; 87us; 15us; 91us; 29us; 27us; 32us; 36us; 35us; 62us; 36us; 64us; 39us; 70us; 40us; 45us; 41us; 54us; 43us; 58us; 45us; 101us; 48us; 28us; 51us; 26us; 52us; 25us; 53us; 44us; 54us; 43us; 4us; 32768us; 25us; 131us; 26us; 133us; 27us; 136us; 28us; 134us; 1us; 32768us; 53us; 30us; 1us; 32768us; 49us; 31us; 4us; 32768us; 3us; 137us; 17us; 154us; 29us; 139us; 53us; 156us; 5us; 32768us; 4us; 151us; 11us; 149us; 24us; 33us; 25us; 152us; 28us; 153us; 17us; 32768us; 0us; 128us; 12us; 83us; 13us; 87us; 15us; 91us; 29us; 27us; 32us; 36us; 35us; 62us; 36us; 64us; 39us; 70us; 40us; 45us; 41us; 54us; 43us; 58us; 45us; 101us; 51us; 26us; 52us; 25us; 53us; 44us; 54us; 43us; 1us; 32768us; 30us; 35us; 0us; 16402us; 5us; 32768us; 0us; 121us; 15us; 94us; 17us; 103us; 43us; 111us; 53us; 37us; 1us; 32768us; 50us; 38us; 17us; 32768us; 0us; 128us; 12us; 83us; 13us; 87us; 15us; 91us; 29us; 27us; 32us; 36us; 35us; 62us; 36us; 64us; 39us; 70us; 40us; 45us; 41us; 54us; 43us; 58us; 45us; 101us; 51us; 26us; 52us; 25us; 53us; 44us; 54us; 43us; 1us; 32768us; 31us; 40us; 17us; 32768us; 0us; 128us; 12us; 83us; 13us; 87us; 15us; 91us; 29us; 27us; 32us; 36us; 35us; 62us; 36us; 64us; 39us; 70us; 40us; 45us; 41us; 54us; 43us; 58us; 45us; 101us; 51us; 26us; 52us; 25us; 53us; 44us; 54us; 43us; 1us; 32768us; 33us; 42us; 0us; 16403us; 0us; 16404us; 0us; 16405us; 4us; 32768us; 3us; 137us; 17us; 154us; 29us; 139us; 53us; 156us; 4us; 16406us; 4us; 151us; 11us; 149us; 25us; 152us; 28us; 153us; 1us; 32768us; 53us; 48us; 1us; 32768us; 49us; 49us; 3us; 32768us; 5us; 16us; 6us; 17us; 7us; 18us; 1us; 32768us; 31us; 51us; 17us; 32768us; 0us; 128us; 12us; 83us; 13us; 87us; 15us; 91us; 29us; 27us; 32us; 36us; 35us; 62us; 36us; 64us; 39us; 70us; 40us; 45us; 41us; 54us; 43us; 58us; 45us; 101us; 51us; 26us; 52us; 25us; 53us; 44us; 54us; 43us; 1us; 32768us; 33us; 53us; 0us; 16407us; 4us; 32768us; 3us; 137us; 17us; 154us; 29us; 139us; 53us; 156us; 21us; 32768us; 0us; 128us; 4us; 151us; 11us; 149us; 12us; 83us; 13us; 87us; 15us; 91us; 25us; 152us; 28us; 153us; 29us; 27us; 32us; 36us; 35us; 62us; 36us; 64us; 39us; 70us; 40us; 45us; 41us; 54us; 43us; 58us; 45us; 101us; 51us; 26us; 52us; 25us; 53us; 44us; 54us; 43us; 17us; 32768us; 0us; 128us; 12us; 83us; 13us; 87us; 15us; 91us; 29us; 27us; 32us; 36us; 35us; 62us; 36us; 64us; 39us; 70us; 40us; 45us; 41us; 54us; 43us; 58us; 45us; 101us; 51us; 26us; 52us; 25us; 53us; 44us; 54us; 43us; 0us; 16408us; 17us; 32768us; 0us; 128us; 12us; 83us; 13us; 87us; 15us; 91us; 29us; 27us; 32us; 36us; 35us; 62us; 36us; 64us; 39us; 70us; 40us; 45us; 41us; 54us; 43us; 58us; 45us; 101us; 51us; 26us; 52us; 25us; 53us; 44us; 54us; 43us; 17us; 32768us; 0us; 128us; 12us; 83us; 13us; 87us; 15us; 91us; 29us; 27us; 32us; 36us; 35us; 62us; 36us; 64us; 39us; 70us; 40us; 45us; 41us; 54us; 43us; 58us; 45us; 101us; 51us; 26us; 52us; 25us; 53us; 44us; 54us; 43us; 17us; 32768us; 0us; 128us; 12us; 83us; 13us; 87us; 15us; 91us; 29us; 27us; 32us; 36us; 35us; 62us; 36us; 64us; 39us; 70us; 40us; 45us; 41us; 54us; 43us; 58us; 45us; 101us; 51us; 26us; 52us; 25us; 53us; 44us; 54us; 43us; 0us; 16409us; 17us; 32768us; 0us; 128us; 12us; 83us; 13us; 87us; 15us; 91us; 29us; 27us; 32us; 36us; 35us; 62us; 36us; 64us; 39us; 70us; 40us; 45us; 41us; 54us; 43us; 58us; 45us; 101us; 51us; 26us; 52us; 25us; 53us; 44us; 54us; 43us; 0us; 16410us; 17us; 32768us; 0us; 128us; 12us; 83us; 13us; 87us; 15us; 91us; 29us; 27us; 32us; 36us; 35us; 62us; 36us; 64us; 39us; 70us; 40us; 45us; 41us; 54us; 43us; 58us; 45us; 101us; 51us; 26us; 52us; 25us; 53us; 44us; 54us; 43us; 0us; 16411us; 0us; 16412us; 17us; 32768us; 0us; 128us; 12us; 83us; 13us; 87us; 15us; 91us; 29us; 27us; 32us; 36us; 35us; 62us; 36us; 64us; 39us; 70us; 40us; 45us; 41us; 54us; 43us; 58us; 45us; 101us; 51us; 26us; 52us; 25us; 53us; 44us; 54us; 43us; 1us; 32768us; 30us; 69us; 0us; 16413us; 17us; 32768us; 0us; 128us; 12us; 83us; 13us; 87us; 15us; 91us; 29us; 27us; 32us; 36us; 35us; 62us; 36us; 64us; 39us; 70us; 40us; 45us; 41us; 54us; 43us; 58us; 45us; 101us; 51us; 26us; 52us; 25us; 53us; 44us; 54us; 43us; 1us; 32768us; 14us; 72us; 4us; 32768us; 3us; 137us; 17us; 154us; 29us; 139us; 53us; 156us; 5us; 32768us; 4us; 151us; 11us; 149us; 25us; 152us; 28us; 153us; 38us; 74us; 1us; 32768us; 12us; 75us; 1us; 32768us; 53us; 76us; 1us; 32768us; 11us; 77us; 17us; 32768us; 0us; 128us; 12us; 83us; 13us; 87us; 15us; 91us; 29us; 27us; 32us; 36us; 35us; 62us; 36us; 64us; 39us; 70us; 40us; 45us; 41us; 54us; 43us; 58us; 45us; 101us; 51us; 26us; 52us; 25us; 53us; 44us; 54us; 43us; 1us; 32768us; 13us; 79us; 1us; 32768us; 53us; 80us; 1us; 32768us; 11us; 81us; 17us; 32768us; 0us; 128us; 12us; 83us; 13us; 87us; 15us; 91us; 29us; 27us; 32us; 36us; 35us; 62us; 36us; 64us; 39us; 70us; 40us; 45us; 41us; 54us; 43us; 58us; 45us; 101us; 51us; 26us; 52us; 25us; 53us; 44us; 54us; 43us; 0us; 16414us; 4us; 32768us; 3us; 137us; 17us; 154us; 29us; 139us; 53us; 156us; 8us; 32768us; 3us; 137us; 4us; 151us; 11us; 149us; 17us; 154us; 25us; 152us; 28us; 153us; 29us; 139us; 53us; 156us; 21us; 32768us; 0us; 128us; 4us; 151us; 11us; 149us; 12us; 83us; 13us; 87us; 15us; 91us; 25us; 152us; 28us; 153us; 29us; 27us; 32us; 36us; 35us; 62us; 36us; 64us; 39us; 70us; 40us; 45us; 41us; 54us; 43us; 58us; 45us; 101us; 51us; 26us; 52us; 25us; 53us; 44us; 54us; 43us; 0us; 16415us; 4us; 32768us; 3us; 137us; 17us; 154us; 29us; 139us; 53us; 156us; 8us; 32768us; 3us; 137us; 4us; 151us; 11us; 149us; 17us; 154us; 25us; 152us; 28us; 153us; 29us; 139us; 53us; 156us; 21us; 32768us; 0us; 128us; 4us; 151us; 11us; 149us; 12us; 83us; 13us; 87us; 15us; 91us; 25us; 152us; 28us; 153us; 29us; 27us; 32us; 36us; 35us; 62us; 36us; 64us; 39us; 70us; 40us; 45us; 41us; 54us; 43us; 58us; 45us; 101us; 51us; 26us; 52us; 25us; 53us; 44us; 54us; 43us; 0us; 16416us; 4us; 32768us; 25us; 131us; 26us; 133us; 27us; 136us; 28us; 134us; 17us; 32768us; 0us; 128us; 12us; 83us; 13us; 87us; 15us; 91us; 29us; 27us; 32us; 36us; 35us; 62us; 36us; 64us; 39us; 70us; 40us; 45us; 41us; 54us; 43us; 58us; 45us; 101us; 51us; 26us; 52us; 25us; 53us; 44us; 54us; 43us; 0us; 16417us; 4us; 32768us; 25us; 131us; 26us; 133us; 27us; 136us; 28us; 134us; 1us; 32768us; 53us; 96us; 1us; 32768us; 50us; 97us; 17us; 32768us; 0us; 128us; 12us; 83us; 13us; 87us; 15us; 91us; 29us; 27us; 32us; 36us; 35us; 62us; 36us; 64us; 39us; 70us; 40us; 45us; 41us; 54us; 43us; 58us; 45us; 101us; 51us; 26us; 52us; 25us; 53us; 44us; 54us; 43us; 1us; 32768us; 31us; 99us; 17us; 32768us; 0us; 128us; 12us; 83us; 13us; 87us; 15us; 91us; 29us; 27us; 32us; 36us; 35us; 62us; 36us; 64us; 39us; 70us; 40us; 45us; 41us; 54us; 43us; 58us; 45us; 101us; 51us; 26us; 52us; 25us; 53us; 44us; 54us; 43us; 0us; 16418us; 17us; 32768us; 0us; 128us; 12us; 83us; 13us; 87us; 15us; 91us; 29us; 27us; 32us; 36us; 35us; 62us; 36us; 64us; 39us; 70us; 40us; 45us; 41us; 54us; 43us; 58us; 45us; 101us; 51us; 26us; 52us; 25us; 53us; 44us; 54us; 43us; 0us; 16419us; 1us; 32768us; 53us; 104us; 1us; 32768us; 17us; 105us; 1us; 32768us; 50us; 106us; 17us; 32768us; 0us; 128us; 12us; 83us; 13us; 87us; 15us; 91us; 29us; 27us; 32us; 36us; 35us; 62us; 36us; 64us; 39us; 70us; 40us; 45us; 41us; 54us; 43us; 58us; 45us; 101us; 51us; 26us; 52us; 25us; 53us; 44us; 54us; 43us; 1us; 32768us; 31us; 108us; 17us; 32768us; 0us; 128us; 12us; 83us; 13us; 87us; 15us; 91us; 29us; 27us; 32us; 36us; 35us; 62us; 36us; 64us; 39us; 70us; 40us; 45us; 41us; 54us; 43us; 58us; 45us; 101us; 51us; 26us; 52us; 25us; 53us; 44us; 54us; 43us; 1us; 32768us; 33us; 110us; 0us; 16420us; 4us; 32768us; 3us; 137us; 17us; 154us; 29us; 139us; 53us; 156us; 5us; 32768us; 4us; 151us; 11us; 149us; 25us; 152us; 28us; 153us; 53us; 113us; 1us; 32768us; 53us; 114us; 1us; 32768us; 53us; 115us; 1us; 32768us; 50us; 116us; 17us; 32768us; 0us; 128us; 12us; 83us; 13us; 87us; 15us; 91us; 29us; 27us; 32us; 36us; 35us; 62us; 36us; 64us; 39us; 70us; 40us; 45us; 41us; 54us; 43us; 58us; 45us; 101us; 51us; 26us; 52us; 25us; 53us; 44us; 54us; 43us; 1us; 32768us; 31us; 118us; 17us; 32768us; 0us; 128us; 12us; 83us; 13us; 87us; 15us; 91us; 29us; 27us; 32us; 36us; 35us; 62us; 36us; 64us; 39us; 70us; 40us; 45us; 41us; 54us; 43us; 58us; 45us; 101us; 51us; 26us; 52us; 25us; 53us; 44us; 54us; 43us; 1us; 32768us; 33us; 120us; 0us; 16421us; 1us; 32768us; 53us; 122us; 1us; 32768us; 1us; 123us; 1us; 32768us; 2us; 124us; 17us; 32768us; 0us; 128us; 12us; 83us; 13us; 87us; 15us; 91us; 29us; 27us; 32us; 36us; 35us; 62us; 36us; 64us; 39us; 70us; 40us; 45us; 41us; 54us; 43us; 58us; 45us; 101us; 51us; 26us; 52us; 25us; 53us; 44us; 54us; 43us; 1us; 32768us; 31us; 126us; 17us; 32768us; 0us; 128us; 12us; 83us; 13us; 87us; 15us; 91us; 29us; 27us; 32us; 36us; 35us; 62us; 36us; 64us; 39us; 70us; 40us; 45us; 41us; 54us; 43us; 58us; 45us; 101us; 51us; 26us; 52us; 25us; 53us; 44us; 54us; 43us; 0us; 16422us; 17us; 32768us; 0us; 128us; 12us; 83us; 13us; 87us; 15us; 91us; 29us; 27us; 32us; 36us; 35us; 62us; 36us; 64us; 39us; 70us; 40us; 45us; 41us; 54us; 43us; 58us; 45us; 101us; 51us; 26us; 52us; 25us; 53us; 44us; 54us; 43us; 1us; 32768us; 1us; 130us; 0us; 16423us; 0us; 16424us; 4us; 16424us; 3us; 137us; 17us; 154us; 29us; 139us; 53us; 156us; 0us; 16425us; 0us; 16426us; 4us; 16426us; 3us; 137us; 17us; 154us; 29us; 139us; 53us; 156us; 0us; 16427us; 1us; 32768us; 53us; 138us; 0us; 16428us; 4us; 32768us; 3us; 137us; 17us; 154us; 29us; 139us; 53us; 156us; 7us; 32768us; 4us; 151us; 11us; 149us; 25us; 132us; 26us; 133us; 27us; 136us; 28us; 135us; 30us; 143us; 1us; 32768us; 30us; 142us; 0us; 16429us; 0us; 16430us; 4us; 16431us; 4us; 151us; 11us; 149us; 25us; 152us; 28us; 153us; 4us; 16432us; 4us; 151us; 11us; 149us; 25us; 152us; 28us; 153us; 4us; 16433us; 4us; 151us; 11us; 149us; 25us; 152us; 28us; 153us; 4us; 16434us; 4us; 151us; 11us; 149us; 25us; 152us; 28us; 153us; 5us; 32768us; 4us; 151us; 11us; 149us; 17us; 155us; 25us; 152us; 28us; 153us; 4us; 32768us; 25us; 131us; 26us; 133us; 27us; 136us; 28us; 134us; 4us; 32768us; 3us; 137us; 17us; 154us; 29us; 139us; 53us; 156us; 4us; 32768us; 3us; 137us; 17us; 154us; 29us; 139us; 53us; 156us; 4us; 32768us; 3us; 137us; 17us; 154us; 29us; 139us; 53us; 156us; 4us; 32768us; 3us; 137us; 17us; 154us; 29us; 139us; 53us; 156us; 4us; 32768us; 3us; 137us; 17us; 154us; 29us; 139us; 53us; 156us; 0us; 16435us; 0us; 16436us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 5us; 10us; 29us; 30us; 32us; 35us; 53us; 54us; 55us; 57us; 62us; 68us; 69us; 71us; 72us; 73us; 74us; 75us; 76us; 77us; 97us; 98us; 103us; 108us; 110us; 111us; 112us; 132us; 137us; 139us; 141us; 146us; 152us; 170us; 172us; 173us; 179us; 181us; 199us; 201us; 219us; 221us; 222us; 223us; 224us; 229us; 234us; 236us; 238us; 242us; 244us; 262us; 264us; 265us; 270us; 292us; 310us; 311us; 329us; 347us; 365us; 366us; 384us; 385us; 403us; 404us; 405us; 423us; 425us; 426us; 444us; 446us; 451us; 457us; 459us; 461us; 463us; 481us; 483us; 485us; 487us; 505us; 506us; 511us; 520us; 542us; 543us; 548us; 557us; 579us; 580us; 585us; 603us; 604us; 609us; 611us; 613us; 631us; 633us; 651us; 652us; 670us; 671us; 673us; 675us; 677us; 695us; 697us; 715us; 717us; 718us; 723us; 729us; 731us; 733us; 735us; 753us; 755us; 773us; 775us; 776us; 778us; 780us; 782us; 800us; 802us; 820us; 821us; 839us; 841us; 842us; 843us; 848us; 849us; 850us; 855us; 856us; 858us; 859us; 864us; 872us; 874us; 875us; 876us; 881us; 886us; 891us; 896us; 902us; 907us; 912us; 917us; 922us; 927us; 932us; 933us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 1us; 4us; 1us; 4us; 3us; 1us; 1us; 1us; 1us; 1us; 1us; 3us; 2us; 3us; 1us; 1us; 1us; 9us; 7us; 1us; 1us; 2us; 8us; 4us; 4us; 2us; 2us; 3us; 5us; 13us; 4us; 4us; 3us; 8us; 2us; 9us; 11us; 8us; 3us; 1us; 1us; 1us; 1us; 2us; 4us; 3us; 4us; 3us; 3us; 3us; 3us; 1us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 2us; 2us; 3us; 4us; 4us; 5us; 5us; 5us; 6us; 7us; 7us; 8us; 8us; 8us; 9us; 9us; 9us; 9us; 9us; 9us; 9us; 9us; 9us; 9us; 9us; 9us; 9us; 9us; 9us; 9us; 9us; 9us; 9us; 9us; 9us; 9us; 9us; 9us; 10us; 10us; 10us; 10us; 11us; 11us; 11us; 11us; 11us; 11us; 11us; 11us; 11us; |]
let _fsyacc_immediateActions = [|65535us; 65535us; 65535us; 49152us; 65535us; 65535us; 65535us; 16386us; 16387us; 65535us; 65535us; 65535us; 16388us; 65535us; 16389us; 16390us; 16391us; 16392us; 16393us; 16394us; 65535us; 16397us; 65535us; 65535us; 65535us; 16400us; 16401us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16402us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16403us; 16404us; 16405us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16407us; 65535us; 65535us; 65535us; 16408us; 65535us; 65535us; 65535us; 16409us; 65535us; 16410us; 65535us; 16411us; 16412us; 65535us; 65535us; 16413us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16414us; 65535us; 65535us; 65535us; 16415us; 65535us; 65535us; 65535us; 16416us; 65535us; 65535us; 16417us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16418us; 65535us; 16419us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16420us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16421us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16422us; 65535us; 65535us; 16423us; 16424us; 65535us; 16425us; 16426us; 65535us; 16427us; 65535us; 16428us; 65535us; 65535us; 65535us; 16429us; 16430us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16435us; 16436us; |]
let _fsyacc_reductions ()  =    [| 
# 451 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data :  Ast.Ty )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (Microsoft.FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startTy));
# 460 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data :  Ast.Prog )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (Microsoft.FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startstart));
# 469 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'TypeAliasList)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 24 "Parser.fsy"
                                                          { typeAliases = Map<string,Ty>(_2) ; exprAliases = Map.empty ;  body = _4 } 
                   )
# 24 "Parser.fsy"
                 :  Ast.Prog ));
# 481 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 25 "Parser.fsy"
                                   { typeAliases = Map.empty; exprAliases = Map.empty ;  body = _1 } 
                   )
# 25 "Parser.fsy"
                 :  Ast.Prog ));
# 492 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data :  Ast.Ty )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 27 "Parser.fsy"
                                                         (_1,_3) 
                   )
# 27 "Parser.fsy"
                 : 'TypeAlias));
# 504 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'TypeAliasList)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'TypeAlias)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 28 "Parser.fsy"
                                                                         _3 :: _1 
                   )
# 28 "Parser.fsy"
                 : 'TypeAliasList));
# 516 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'TypeAlias)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 29 "Parser.fsy"
                                                 [_1] 
                   )
# 29 "Parser.fsy"
                 : 'TypeAliasList));
# 527 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 31 "Parser.fsy"
                                               Toset 
                   )
# 31 "Parser.fsy"
                 : 'ProperKindPrime));
# 537 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 32 "Parser.fsy"
                                          Proset 
                   )
# 32 "Parser.fsy"
                 : 'ProperKindPrime));
# 547 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 33 "Parser.fsy"
                                               Semilattice 
                   )
# 33 "Parser.fsy"
                 : 'ProperKindPrime));
# 557 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'ProperKindPrime)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 35 "Parser.fsy"
                                                    KProper(Set [_1 ; Proset], parseState.ResultRange) 
                   )
# 35 "Parser.fsy"
                 : 'ProperKind));
# 568 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'ProperKind)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 37 "Parser.fsy"
                                         _1 
                   )
# 37 "Parser.fsy"
                 : 'Kind));
# 579 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'ProperKindPrime)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Kind)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 38 "Parser.fsy"
                                                           KOperator(_1,_3,parseState.ResultRange) 
                   )
# 38 "Parser.fsy"
                 : 'Kind));
# 591 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'ExprList)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 40 "Parser.fsy"
                                                App(_1,_2, parseState.ResultRange) 
                   )
# 40 "Parser.fsy"
                 : 'ExprList));
# 603 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'ExprList)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data :  Ast.Ty )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 41 "Parser.fsy"
                                             ForallApp(_1, _2, parseState.ResultRange) 
                   )
# 41 "Parser.fsy"
                 : 'ExprList));
# 615 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 42 "Parser.fsy"
                                       _1 
                   )
# 42 "Parser.fsy"
                 : 'ExprList));
# 626 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : System.Int32)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 44 "Parser.fsy"
                                                        Int(_1, parseState.ResultRange) 
                   )
# 44 "Parser.fsy"
                 : 'Expr));
# 637 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : System.Double)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 45 "Parser.fsy"
                                                     Float(_1, parseState.ResultRange) 
                   )
# 45 "Parser.fsy"
                 : 'Expr));
# 648 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Scalar)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data :  Ast.Ty )) in
            let _8 = (let data = parseState.GetInput(8) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 47 "Parser.fsy"
                          Abs(_4, _6, _3, _8, parseState.ResultRange) 
                   )
# 47 "Parser.fsy"
                 : 'Expr));
# 662 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 48 "Parser.fsy"
                                                        Let(_2,_4,_6, parseState.ResultRange) 
                   )
# 48 "Parser.fsy"
                 : 'Expr));
# 675 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 49 "Parser.fsy"
                                Const(_1, parseState.ResultRange) 
                   )
# 49 "Parser.fsy"
                 : 'Expr));
# 686 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 50 "Parser.fsy"
                             Var(_1, parseState.ResultRange) 
                   )
# 50 "Parser.fsy"
                 : 'Expr));
# 697 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data :  Ast.Ty )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 51 "Parser.fsy"
                                 Bot(_2, parseState.ResultRange) 
                   )
# 51 "Parser.fsy"
                 : 'Expr));
# 708 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'ProperKind)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 52 "Parser.fsy"
                                                                        Forall(_3,_5,_7, parseState.ResultRange) 
                   )
# 52 "Parser.fsy"
                 : 'Expr));
# 721 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data :  Ast.Ty )) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 53 "Parser.fsy"
                                            Join(_2, _3, _4, parseState.ResultRange) 
                   )
# 53 "Parser.fsy"
                 : 'Expr));
# 734 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 54 "Parser.fsy"
                                              Cons(_2, _3, _4, parseState.ResultRange) 
                   )
# 54 "Parser.fsy"
                 : 'Expr));
# 747 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 55 "Parser.fsy"
                                   Fst(_2, parseState.ResultRange) 
                   )
# 55 "Parser.fsy"
                 : 'Expr));
# 758 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 56 "Parser.fsy"
                                   Snd(_2, parseState.ResultRange) 
                   )
# 56 "Parser.fsy"
                 : 'Expr));
# 769 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'ExprList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 57 "Parser.fsy"
                                                 _2 
                   )
# 57 "Parser.fsy"
                 : 'Expr));
# 780 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 58 "Parser.fsy"
                                                        Pair(_2, _4, parseState.ResultRange) 
                   )
# 58 "Parser.fsy"
                 : 'Expr));
# 792 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data :  Ast.Ty )) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _9 = (let data = parseState.GetInput(9) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _11 = (let data = parseState.GetInput(11) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _13 = (let data = parseState.GetInput(13) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 60 "Parser.fsy"
                          Case(_2, _4, _7, _9, _11, _13, parseState.ResultRange) 
                   )
# 60 "Parser.fsy"
                 : 'Expr));
# 808 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data :  Ast.Ty )) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data :  Ast.Ty )) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 61 "Parser.fsy"
                                         Inl(_2,_3,_4, parseState.ResultRange) 
                   )
# 61 "Parser.fsy"
                 : 'Expr));
# 821 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data :  Ast.Ty )) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data :  Ast.Ty )) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 62 "Parser.fsy"
                                         Inr(_2,_3,_4, parseState.ResultRange) 
                   )
# 62 "Parser.fsy"
                 : 'Expr));
# 834 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Scalar)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 63 "Parser.fsy"
                                          Cap(_2, _3, parseState.ResultRange) 
                   )
# 63 "Parser.fsy"
                 : 'Expr));
# 846 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Scalar)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _8 = (let data = parseState.GetInput(8) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 64 "Parser.fsy"
                                                               Uncap(_3, _4, _6, _8, parseState.ResultRange) 
                   )
# 64 "Parser.fsy"
                 : 'Expr));
# 860 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 65 "Parser.fsy"
                                    ISet(_2, parseState.ResultRange) 
                   )
# 65 "Parser.fsy"
                 : 'Expr));
# 871 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _8 = (let data = parseState.GetInput(8) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 66 "Parser.fsy"
                                                                  IGet(_3, _6, _8, parseState.ResultRange) 
                   )
# 66 "Parser.fsy"
                 : 'Expr));
# 884 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data :  Ast.Ty )) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _8 = (let data = parseState.GetInput(8) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _10 = (let data = parseState.GetInput(10) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 67 "Parser.fsy"
                                                                      Extract(_3,_4,_5,_6,_8,_10, parseState.ResultRange) 
                   )
# 67 "Parser.fsy"
                 : 'Expr));
# 900 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _8 = (let data = parseState.GetInput(8) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 68 "Parser.fsy"
                                                                                   MLet(_3,_5,_6, parseState.ResultRange) 
                   )
# 68 "Parser.fsy"
                 : 'Expr));
# 913 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 69 "Parser.fsy"
                                                             MRet(_2, parseState.ResultRange) 
                   )
# 69 "Parser.fsy"
                 : 'Expr));
# 924 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 71 "Parser.fsy"
                                            CoeffectMonotone 
                   )
# 71 "Parser.fsy"
                 : 'Scalar));
# 934 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 72 "Parser.fsy"
                                            CoeffectAntitone 
                   )
# 72 "Parser.fsy"
                 : 'Scalar));
# 944 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 73 "Parser.fsy"
                                         CoeffectRobust 
                   )
# 73 "Parser.fsy"
                 : 'Scalar));
# 954 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 74 "Parser.fsy"
                                         CoeffectAny 
                   )
# 74 "Parser.fsy"
                 : 'Scalar));
# 964 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 76 "Parser.fsy"
                                   BaseTy(_2, parseState.ResultRange) 
                   )
# 76 "Parser.fsy"
                 :  Ast.Ty ));
# 975 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data :  Ast.Ty )) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Scalar)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 77 "Parser.fsy"
                                                   Capsule(_2, _3, parseState.ResultRange) 
                   )
# 77 "Parser.fsy"
                 :  Ast.Ty ));
# 987 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data :  Ast.Ty )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 78 "Parser.fsy"
                                            _2 
                   )
# 78 "Parser.fsy"
                 :  Ast.Ty ));
# 998 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data :  Ast.Ty )) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Scalar)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data :  Ast.Ty )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 79 "Parser.fsy"
                                              FunTy(_1,_3,_4, parseState.ResultRange) 
                   )
# 79 "Parser.fsy"
                 :  Ast.Ty ));
# 1011 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data :  Ast.Ty )) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data :  Ast.Ty )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 80 "Parser.fsy"
                                      Dictionary(_1,_3, parseState.ResultRange) 
                   )
# 80 "Parser.fsy"
                 :  Ast.Ty ));
# 1023 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data :  Ast.Ty )) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data :  Ast.Ty )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 81 "Parser.fsy"
                                      Sum(_1,_3, parseState.ResultRange) 
                   )
# 81 "Parser.fsy"
                 :  Ast.Ty ));
# 1035 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data :  Ast.Ty )) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data :  Ast.Ty )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 82 "Parser.fsy"
                                          Prod(_1,_3, parseState.ResultRange) 
                   )
# 82 "Parser.fsy"
                 :  Ast.Ty ));
# 1047 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data :  Ast.Ty )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 83 "Parser.fsy"
                                        IVar(_2, parseState.ResultRange) 
                   )
# 83 "Parser.fsy"
                 :  Ast.Ty ));
# 1058 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 84 "Parser.fsy"
                              TyAlias(_1, parseState.ResultRange) 
                   )
# 84 "Parser.fsy"
                 :  Ast.Ty ));
|]
# 1070 "Parser.fs"
let tables () : Microsoft.FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:Microsoft.FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 58;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let Ty lexer lexbuf :  Ast.Ty  =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))
let start lexer lexbuf :  Ast.Prog  =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 2))
