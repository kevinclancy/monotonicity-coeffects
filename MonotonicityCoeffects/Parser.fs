module Parser
// Implementation file for parser generated by fsyacc
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open Microsoft.FSharp.Text.Lexing
open Microsoft.FSharp.Text.Parsing.ParseHelpers
# 1 "Parser.fsy"

open Ast

# 9 "Parser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | HASH
  | DICT
  | TOSET
  | PROSET
  | SEMILATTICE
  | FORALL
  | BIGFORALL
  | IMPLIES
  | INL
  | INR
  | TO
  | CAP
  | UNCAP
  | PIPE
  | TYPES
  | SEMICOLON
  | LBRACK
  | RBRACK
  | BANG
  | AT
  | DOT
  | PLUS
  | MINUS
  | QUESTION
  | ASTERISK
  | LPAREN
  | RPAREN
  | IN
  | LET
  | END
  | EOF
  | FST
  | SND
  | COMMA
  | OF
  | CASE
  | BOT
  | JOIN
  | EXTRACT
  | CONS
  | IGET
  | ISET
  | TRUE
  | FALSE
  | FUN
  | COLON
  | EQUAL
  | FLOAT of (System.Double)
  | INT of (System.Int32)
  | ID of (string)
  | CONST of (string)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_HASH
    | TOKEN_DICT
    | TOKEN_TOSET
    | TOKEN_PROSET
    | TOKEN_SEMILATTICE
    | TOKEN_FORALL
    | TOKEN_BIGFORALL
    | TOKEN_IMPLIES
    | TOKEN_INL
    | TOKEN_INR
    | TOKEN_TO
    | TOKEN_CAP
    | TOKEN_UNCAP
    | TOKEN_PIPE
    | TOKEN_TYPES
    | TOKEN_SEMICOLON
    | TOKEN_LBRACK
    | TOKEN_RBRACK
    | TOKEN_BANG
    | TOKEN_AT
    | TOKEN_DOT
    | TOKEN_PLUS
    | TOKEN_MINUS
    | TOKEN_QUESTION
    | TOKEN_ASTERISK
    | TOKEN_LPAREN
    | TOKEN_RPAREN
    | TOKEN_IN
    | TOKEN_LET
    | TOKEN_END
    | TOKEN_EOF
    | TOKEN_FST
    | TOKEN_SND
    | TOKEN_COMMA
    | TOKEN_OF
    | TOKEN_CASE
    | TOKEN_BOT
    | TOKEN_JOIN
    | TOKEN_EXTRACT
    | TOKEN_CONS
    | TOKEN_IGET
    | TOKEN_ISET
    | TOKEN_TRUE
    | TOKEN_FALSE
    | TOKEN_FUN
    | TOKEN_COLON
    | TOKEN_EQUAL
    | TOKEN_FLOAT
    | TOKEN_INT
    | TOKEN_ID
    | TOKEN_CONST
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startTy
    | NONTERM__startstart
    | NONTERM_start
    | NONTERM_TypeAlias
    | NONTERM_TypeAliasList
    | NONTERM_ProperKindPrime
    | NONTERM_ProperKind
    | NONTERM_Kind
    | NONTERM_ExprList
    | NONTERM_Expr
    | NONTERM_Scalar
    | NONTERM_Ty

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | HASH  -> 0 
  | DICT  -> 1 
  | TOSET  -> 2 
  | PROSET  -> 3 
  | SEMILATTICE  -> 4 
  | FORALL  -> 5 
  | BIGFORALL  -> 6 
  | IMPLIES  -> 7 
  | INL  -> 8 
  | INR  -> 9 
  | TO  -> 10 
  | CAP  -> 11 
  | UNCAP  -> 12 
  | PIPE  -> 13 
  | TYPES  -> 14 
  | SEMICOLON  -> 15 
  | LBRACK  -> 16 
  | RBRACK  -> 17 
  | BANG  -> 18 
  | AT  -> 19 
  | DOT  -> 20 
  | PLUS  -> 21 
  | MINUS  -> 22 
  | QUESTION  -> 23 
  | ASTERISK  -> 24 
  | LPAREN  -> 25 
  | RPAREN  -> 26 
  | IN  -> 27 
  | LET  -> 28 
  | END  -> 29 
  | EOF  -> 30 
  | FST  -> 31 
  | SND  -> 32 
  | COMMA  -> 33 
  | OF  -> 34 
  | CASE  -> 35 
  | BOT  -> 36 
  | JOIN  -> 37 
  | EXTRACT  -> 38 
  | CONS  -> 39 
  | IGET  -> 40 
  | ISET  -> 41 
  | TRUE  -> 42 
  | FALSE  -> 43 
  | FUN  -> 44 
  | COLON  -> 45 
  | EQUAL  -> 46 
  | FLOAT _ -> 47 
  | INT _ -> 48 
  | ID _ -> 49 
  | CONST _ -> 50 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_HASH 
  | 1 -> TOKEN_DICT 
  | 2 -> TOKEN_TOSET 
  | 3 -> TOKEN_PROSET 
  | 4 -> TOKEN_SEMILATTICE 
  | 5 -> TOKEN_FORALL 
  | 6 -> TOKEN_BIGFORALL 
  | 7 -> TOKEN_IMPLIES 
  | 8 -> TOKEN_INL 
  | 9 -> TOKEN_INR 
  | 10 -> TOKEN_TO 
  | 11 -> TOKEN_CAP 
  | 12 -> TOKEN_UNCAP 
  | 13 -> TOKEN_PIPE 
  | 14 -> TOKEN_TYPES 
  | 15 -> TOKEN_SEMICOLON 
  | 16 -> TOKEN_LBRACK 
  | 17 -> TOKEN_RBRACK 
  | 18 -> TOKEN_BANG 
  | 19 -> TOKEN_AT 
  | 20 -> TOKEN_DOT 
  | 21 -> TOKEN_PLUS 
  | 22 -> TOKEN_MINUS 
  | 23 -> TOKEN_QUESTION 
  | 24 -> TOKEN_ASTERISK 
  | 25 -> TOKEN_LPAREN 
  | 26 -> TOKEN_RPAREN 
  | 27 -> TOKEN_IN 
  | 28 -> TOKEN_LET 
  | 29 -> TOKEN_END 
  | 30 -> TOKEN_EOF 
  | 31 -> TOKEN_FST 
  | 32 -> TOKEN_SND 
  | 33 -> TOKEN_COMMA 
  | 34 -> TOKEN_OF 
  | 35 -> TOKEN_CASE 
  | 36 -> TOKEN_BOT 
  | 37 -> TOKEN_JOIN 
  | 38 -> TOKEN_EXTRACT 
  | 39 -> TOKEN_CONS 
  | 40 -> TOKEN_IGET 
  | 41 -> TOKEN_ISET 
  | 42 -> TOKEN_TRUE 
  | 43 -> TOKEN_FALSE 
  | 44 -> TOKEN_FUN 
  | 45 -> TOKEN_COLON 
  | 46 -> TOKEN_EQUAL 
  | 47 -> TOKEN_FLOAT 
  | 48 -> TOKEN_INT 
  | 49 -> TOKEN_ID 
  | 50 -> TOKEN_CONST 
  | 53 -> TOKEN_end_of_input
  | 51 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startTy 
    | 1 -> NONTERM__startstart 
    | 2 -> NONTERM_start 
    | 3 -> NONTERM_start 
    | 4 -> NONTERM_TypeAlias 
    | 5 -> NONTERM_TypeAliasList 
    | 6 -> NONTERM_TypeAliasList 
    | 7 -> NONTERM_ProperKindPrime 
    | 8 -> NONTERM_ProperKindPrime 
    | 9 -> NONTERM_ProperKindPrime 
    | 10 -> NONTERM_ProperKind 
    | 11 -> NONTERM_Kind 
    | 12 -> NONTERM_Kind 
    | 13 -> NONTERM_ExprList 
    | 14 -> NONTERM_ExprList 
    | 15 -> NONTERM_Expr 
    | 16 -> NONTERM_Expr 
    | 17 -> NONTERM_Expr 
    | 18 -> NONTERM_Expr 
    | 19 -> NONTERM_Expr 
    | 20 -> NONTERM_Expr 
    | 21 -> NONTERM_Expr 
    | 22 -> NONTERM_Expr 
    | 23 -> NONTERM_Expr 
    | 24 -> NONTERM_Expr 
    | 25 -> NONTERM_Expr 
    | 26 -> NONTERM_Expr 
    | 27 -> NONTERM_Expr 
    | 28 -> NONTERM_Expr 
    | 29 -> NONTERM_Expr 
    | 30 -> NONTERM_Expr 
    | 31 -> NONTERM_Expr 
    | 32 -> NONTERM_Expr 
    | 33 -> NONTERM_Expr 
    | 34 -> NONTERM_Expr 
    | 35 -> NONTERM_Expr 
    | 36 -> NONTERM_Expr 
    | 37 -> NONTERM_Scalar 
    | 38 -> NONTERM_Scalar 
    | 39 -> NONTERM_Scalar 
    | 40 -> NONTERM_Scalar 
    | 41 -> NONTERM_Ty 
    | 42 -> NONTERM_Ty 
    | 43 -> NONTERM_Ty 
    | 44 -> NONTERM_Ty 
    | 45 -> NONTERM_Ty 
    | 46 -> NONTERM_Ty 
    | 47 -> NONTERM_Ty 
    | 48 -> NONTERM_Ty 
    | 49 -> NONTERM_Ty 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 53 
let _fsyacc_tagOfErrorTerminal = 51

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | HASH  -> "HASH" 
  | DICT  -> "DICT" 
  | TOSET  -> "TOSET" 
  | PROSET  -> "PROSET" 
  | SEMILATTICE  -> "SEMILATTICE" 
  | FORALL  -> "FORALL" 
  | BIGFORALL  -> "BIGFORALL" 
  | IMPLIES  -> "IMPLIES" 
  | INL  -> "INL" 
  | INR  -> "INR" 
  | TO  -> "TO" 
  | CAP  -> "CAP" 
  | UNCAP  -> "UNCAP" 
  | PIPE  -> "PIPE" 
  | TYPES  -> "TYPES" 
  | SEMICOLON  -> "SEMICOLON" 
  | LBRACK  -> "LBRACK" 
  | RBRACK  -> "RBRACK" 
  | BANG  -> "BANG" 
  | AT  -> "AT" 
  | DOT  -> "DOT" 
  | PLUS  -> "PLUS" 
  | MINUS  -> "MINUS" 
  | QUESTION  -> "QUESTION" 
  | ASTERISK  -> "ASTERISK" 
  | LPAREN  -> "LPAREN" 
  | RPAREN  -> "RPAREN" 
  | IN  -> "IN" 
  | LET  -> "LET" 
  | END  -> "END" 
  | EOF  -> "EOF" 
  | FST  -> "FST" 
  | SND  -> "SND" 
  | COMMA  -> "COMMA" 
  | OF  -> "OF" 
  | CASE  -> "CASE" 
  | BOT  -> "BOT" 
  | JOIN  -> "JOIN" 
  | EXTRACT  -> "EXTRACT" 
  | CONS  -> "CONS" 
  | IGET  -> "IGET" 
  | ISET  -> "ISET" 
  | TRUE  -> "TRUE" 
  | FALSE  -> "FALSE" 
  | FUN  -> "FUN" 
  | COLON  -> "COLON" 
  | EQUAL  -> "EQUAL" 
  | FLOAT _ -> "FLOAT" 
  | INT _ -> "INT" 
  | ID _ -> "ID" 
  | CONST _ -> "CONST" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | HASH  -> (null : System.Object) 
  | DICT  -> (null : System.Object) 
  | TOSET  -> (null : System.Object) 
  | PROSET  -> (null : System.Object) 
  | SEMILATTICE  -> (null : System.Object) 
  | FORALL  -> (null : System.Object) 
  | BIGFORALL  -> (null : System.Object) 
  | IMPLIES  -> (null : System.Object) 
  | INL  -> (null : System.Object) 
  | INR  -> (null : System.Object) 
  | TO  -> (null : System.Object) 
  | CAP  -> (null : System.Object) 
  | UNCAP  -> (null : System.Object) 
  | PIPE  -> (null : System.Object) 
  | TYPES  -> (null : System.Object) 
  | SEMICOLON  -> (null : System.Object) 
  | LBRACK  -> (null : System.Object) 
  | RBRACK  -> (null : System.Object) 
  | BANG  -> (null : System.Object) 
  | AT  -> (null : System.Object) 
  | DOT  -> (null : System.Object) 
  | PLUS  -> (null : System.Object) 
  | MINUS  -> (null : System.Object) 
  | QUESTION  -> (null : System.Object) 
  | ASTERISK  -> (null : System.Object) 
  | LPAREN  -> (null : System.Object) 
  | RPAREN  -> (null : System.Object) 
  | IN  -> (null : System.Object) 
  | LET  -> (null : System.Object) 
  | END  -> (null : System.Object) 
  | EOF  -> (null : System.Object) 
  | FST  -> (null : System.Object) 
  | SND  -> (null : System.Object) 
  | COMMA  -> (null : System.Object) 
  | OF  -> (null : System.Object) 
  | CASE  -> (null : System.Object) 
  | BOT  -> (null : System.Object) 
  | JOIN  -> (null : System.Object) 
  | EXTRACT  -> (null : System.Object) 
  | CONS  -> (null : System.Object) 
  | IGET  -> (null : System.Object) 
  | ISET  -> (null : System.Object) 
  | TRUE  -> (null : System.Object) 
  | FALSE  -> (null : System.Object) 
  | FUN  -> (null : System.Object) 
  | COLON  -> (null : System.Object) 
  | EQUAL  -> (null : System.Object) 
  | FLOAT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | INT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | ID _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | CONST _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us; 65535us; 0us; 65535us; 1us; 65535us; 2us; 3us; 2us; 65535us; 4us; 15us; 13us; 14us; 1us; 65535us; 4us; 5us; 1us; 65535us; 47us; 19us; 1us; 65535us; 47us; 48us; 0us; 65535us; 1us; 65535us; 25us; 20us; 28us; 65535us; 2us; 8us; 6us; 7us; 20us; 21us; 25us; 22us; 31us; 32us; 36us; 37us; 38us; 39us; 49us; 50us; 53us; 54us; 54us; 55us; 56us; 57us; 57us; 58us; 58us; 59us; 60us; 61us; 62us; 63us; 65us; 66us; 73us; 74us; 78us; 79us; 82us; 83us; 86us; 87us; 90us; 91us; 93us; 94us; 95us; 96us; 97us; 98us; 102us; 103us; 104us; 105us; 111us; 112us; 113us; 114us; 4us; 65535us; 26us; 27us; 92us; 93us; 125us; 126us; 134us; 135us; 19us; 65535us; 0us; 1us; 10us; 11us; 29us; 30us; 43us; 44us; 52us; 53us; 69us; 70us; 71us; 72us; 84us; 85us; 85us; 86us; 88us; 89us; 89us; 90us; 117us; 131us; 120us; 132us; 124us; 125us; 135us; 129us; 136us; 130us; 137us; 131us; 138us; 132us; 139us; 133us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 2us; 4us; 7us; 9us; 11us; 13us; 14us; 16us; 45us; 50us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 5us; 0us; 44us; 45us; 46us; 47us; 1us; 1us; 1us; 1us; 1us; 2us; 2us; 2us; 5us; 1us; 2us; 1us; 2us; 1us; 3us; 1us; 4us; 1us; 4us; 5us; 4us; 44us; 45us; 46us; 47us; 1us; 4us; 1us; 5us; 1us; 5us; 1us; 6us; 1us; 7us; 1us; 8us; 1us; 9us; 1us; 10us; 2us; 13us; 27us; 1us; 13us; 2us; 14us; 28us; 1us; 15us; 1us; 16us; 4us; 17us; 22us; 27us; 28us; 1us; 17us; 1us; 17us; 1us; 17us; 1us; 17us; 5us; 17us; 44us; 45us; 46us; 47us; 1us; 17us; 1us; 17us; 1us; 17us; 3us; 18us; 35us; 36us; 1us; 18us; 1us; 18us; 1us; 18us; 1us; 18us; 1us; 18us; 1us; 18us; 1us; 19us; 1us; 20us; 1us; 21us; 5us; 21us; 44us; 45us; 46us; 47us; 1us; 22us; 1us; 22us; 1us; 22us; 1us; 22us; 1us; 22us; 1us; 22us; 1us; 22us; 1us; 23us; 5us; 23us; 44us; 45us; 46us; 47us; 1us; 23us; 1us; 23us; 1us; 24us; 1us; 24us; 1us; 24us; 1us; 24us; 1us; 25us; 1us; 25us; 1us; 26us; 1us; 26us; 1us; 27us; 1us; 28us; 1us; 28us; 1us; 28us; 1us; 29us; 1us; 29us; 5us; 29us; 44us; 45us; 46us; 47us; 1us; 29us; 5us; 29us; 44us; 45us; 46us; 47us; 1us; 29us; 1us; 29us; 1us; 29us; 1us; 29us; 1us; 29us; 1us; 29us; 1us; 29us; 1us; 29us; 1us; 29us; 1us; 29us; 1us; 29us; 1us; 30us; 5us; 30us; 44us; 45us; 46us; 47us; 5us; 30us; 44us; 45us; 46us; 47us; 1us; 30us; 1us; 31us; 5us; 31us; 44us; 45us; 46us; 47us; 5us; 31us; 44us; 45us; 46us; 47us; 1us; 31us; 1us; 32us; 1us; 32us; 1us; 32us; 1us; 33us; 1us; 33us; 1us; 34us; 1us; 34us; 1us; 35us; 1us; 35us; 1us; 35us; 1us; 35us; 1us; 35us; 1us; 35us; 1us; 35us; 1us; 35us; 1us; 36us; 1us; 36us; 1us; 36us; 1us; 36us; 1us; 36us; 1us; 36us; 1us; 36us; 1us; 36us; 1us; 36us; 1us; 37us; 2us; 37us; 46us; 1us; 38us; 1us; 39us; 2us; 39us; 47us; 1us; 40us; 1us; 41us; 1us; 41us; 2us; 42us; 43us; 6us; 42us; 43us; 44us; 45us; 46us; 47us; 1us; 42us; 1us; 42us; 1us; 43us; 5us; 44us; 44us; 45us; 46us; 47us; 5us; 44us; 45us; 45us; 46us; 47us; 5us; 44us; 45us; 46us; 46us; 47us; 5us; 44us; 45us; 46us; 47us; 47us; 5us; 44us; 45us; 46us; 47us; 48us; 1us; 44us; 1us; 44us; 1us; 45us; 1us; 46us; 1us; 47us; 1us; 48us; 1us; 48us; 1us; 49us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 8us; 10us; 12us; 14us; 17us; 19us; 21us; 23us; 25us; 27us; 33us; 35us; 37us; 39us; 41us; 43us; 45us; 47us; 49us; 52us; 54us; 57us; 59us; 61us; 66us; 68us; 70us; 72us; 74us; 80us; 82us; 84us; 86us; 90us; 92us; 94us; 96us; 98us; 100us; 102us; 104us; 106us; 108us; 114us; 116us; 118us; 120us; 122us; 124us; 126us; 128us; 130us; 136us; 138us; 140us; 142us; 144us; 146us; 148us; 150us; 152us; 154us; 156us; 158us; 160us; 162us; 164us; 166us; 168us; 174us; 176us; 182us; 184us; 186us; 188us; 190us; 192us; 194us; 196us; 198us; 200us; 202us; 204us; 206us; 212us; 218us; 220us; 222us; 228us; 234us; 236us; 238us; 240us; 242us; 244us; 246us; 248us; 250us; 252us; 254us; 256us; 258us; 260us; 262us; 264us; 266us; 268us; 270us; 272us; 274us; 276us; 278us; 280us; 282us; 284us; 286us; 289us; 291us; 293us; 296us; 298us; 300us; 302us; 305us; 312us; 314us; 316us; 318us; 324us; 330us; 336us; 342us; 348us; 350us; 352us; 354us; 356us; 358us; 360us; 362us; |]
let _fsyacc_action_rows = 142
let _fsyacc_actionTableElements = [|4us; 32768us; 0us; 122us; 13us; 139us; 25us; 124us; 49us; 141us; 4us; 49152us; 1us; 136us; 10us; 134us; 21us; 137us; 24us; 138us; 18us; 32768us; 8us; 84us; 9us; 88us; 11us; 92us; 12us; 95us; 14us; 4us; 25us; 25us; 28us; 34us; 31us; 60us; 32us; 62us; 35us; 68us; 36us; 43us; 37us; 52us; 39us; 56us; 41us; 97us; 47us; 24us; 48us; 23us; 49us; 42us; 50us; 41us; 0us; 49152us; 1us; 32768us; 49us; 9us; 2us; 32768us; 15us; 13us; 27us; 6us; 17us; 32768us; 8us; 84us; 9us; 88us; 11us; 92us; 12us; 95us; 25us; 25us; 28us; 34us; 31us; 60us; 32us; 62us; 35us; 68us; 36us; 43us; 37us; 52us; 39us; 56us; 41us; 97us; 47us; 24us; 48us; 23us; 49us; 42us; 50us; 41us; 0us; 16386us; 0us; 16387us; 1us; 32768us; 46us; 10us; 4us; 32768us; 0us; 122us; 13us; 139us; 25us; 124us; 49us; 141us; 5us; 32768us; 1us; 136us; 10us; 134us; 15us; 12us; 21us; 137us; 24us; 138us; 0us; 16388us; 1us; 32768us; 49us; 9us; 0us; 16389us; 0us; 16390us; 0us; 16391us; 0us; 16392us; 0us; 16393us; 0us; 16394us; 18us; 32768us; 8us; 84us; 9us; 88us; 11us; 92us; 12us; 95us; 25us; 25us; 26us; 64us; 28us; 34us; 31us; 60us; 32us; 62us; 35us; 68us; 36us; 43us; 37us; 52us; 39us; 56us; 41us; 97us; 47us; 24us; 48us; 23us; 49us; 42us; 50us; 41us; 0us; 16397us; 1us; 16398us; 33us; 65us; 0us; 16399us; 0us; 16400us; 19us; 32768us; 5us; 45us; 8us; 84us; 9us; 88us; 11us; 92us; 12us; 95us; 25us; 25us; 28us; 34us; 31us; 60us; 32us; 62us; 35us; 68us; 36us; 43us; 37us; 52us; 39us; 56us; 41us; 97us; 44us; 26us; 47us; 24us; 48us; 23us; 49us; 42us; 50us; 41us; 4us; 32768us; 21us; 116us; 22us; 118us; 23us; 121us; 24us; 119us; 1us; 32768us; 49us; 28us; 1us; 32768us; 45us; 29us; 4us; 32768us; 0us; 122us; 13us; 139us; 25us; 124us; 49us; 141us; 5us; 32768us; 1us; 136us; 10us; 134us; 20us; 31us; 21us; 137us; 24us; 138us; 17us; 32768us; 8us; 84us; 9us; 88us; 11us; 92us; 12us; 95us; 25us; 25us; 28us; 34us; 31us; 60us; 32us; 62us; 35us; 68us; 36us; 43us; 37us; 52us; 39us; 56us; 41us; 97us; 47us; 24us; 48us; 23us; 49us; 42us; 50us; 41us; 1us; 32768us; 26us; 33us; 0us; 16401us; 3us; 32768us; 13us; 99us; 39us; 107us; 49us; 35us; 1us; 32768us; 46us; 36us; 17us; 32768us; 8us; 84us; 9us; 88us; 11us; 92us; 12us; 95us; 25us; 25us; 28us; 34us; 31us; 60us; 32us; 62us; 35us; 68us; 36us; 43us; 37us; 52us; 39us; 56us; 41us; 97us; 47us; 24us; 48us; 23us; 49us; 42us; 50us; 41us; 1us; 32768us; 27us; 38us; 17us; 32768us; 8us; 84us; 9us; 88us; 11us; 92us; 12us; 95us; 25us; 25us; 28us; 34us; 31us; 60us; 32us; 62us; 35us; 68us; 36us; 43us; 37us; 52us; 39us; 56us; 41us; 97us; 47us; 24us; 48us; 23us; 49us; 42us; 50us; 41us; 1us; 32768us; 29us; 40us; 0us; 16402us; 0us; 16403us; 0us; 16404us; 4us; 32768us; 0us; 122us; 13us; 139us; 25us; 124us; 49us; 141us; 4us; 16405us; 1us; 136us; 10us; 134us; 21us; 137us; 24us; 138us; 1us; 32768us; 49us; 46us; 1us; 32768us; 45us; 47us; 3us; 32768us; 2us; 16us; 3us; 17us; 4us; 18us; 1us; 32768us; 27us; 49us; 17us; 32768us; 8us; 84us; 9us; 88us; 11us; 92us; 12us; 95us; 25us; 25us; 28us; 34us; 31us; 60us; 32us; 62us; 35us; 68us; 36us; 43us; 37us; 52us; 39us; 56us; 41us; 97us; 47us; 24us; 48us; 23us; 49us; 42us; 50us; 41us; 1us; 32768us; 29us; 51us; 0us; 16406us; 4us; 32768us; 0us; 122us; 13us; 139us; 25us; 124us; 49us; 141us; 21us; 32768us; 1us; 136us; 8us; 84us; 9us; 88us; 10us; 134us; 11us; 92us; 12us; 95us; 21us; 137us; 24us; 138us; 25us; 25us; 28us; 34us; 31us; 60us; 32us; 62us; 35us; 68us; 36us; 43us; 37us; 52us; 39us; 56us; 41us; 97us; 47us; 24us; 48us; 23us; 49us; 42us; 50us; 41us; 17us; 32768us; 8us; 84us; 9us; 88us; 11us; 92us; 12us; 95us; 25us; 25us; 28us; 34us; 31us; 60us; 32us; 62us; 35us; 68us; 36us; 43us; 37us; 52us; 39us; 56us; 41us; 97us; 47us; 24us; 48us; 23us; 49us; 42us; 50us; 41us; 0us; 16407us; 17us; 32768us; 8us; 84us; 9us; 88us; 11us; 92us; 12us; 95us; 25us; 25us; 28us; 34us; 31us; 60us; 32us; 62us; 35us; 68us; 36us; 43us; 37us; 52us; 39us; 56us; 41us; 97us; 47us; 24us; 48us; 23us; 49us; 42us; 50us; 41us; 17us; 32768us; 8us; 84us; 9us; 88us; 11us; 92us; 12us; 95us; 25us; 25us; 28us; 34us; 31us; 60us; 32us; 62us; 35us; 68us; 36us; 43us; 37us; 52us; 39us; 56us; 41us; 97us; 47us; 24us; 48us; 23us; 49us; 42us; 50us; 41us; 17us; 32768us; 8us; 84us; 9us; 88us; 11us; 92us; 12us; 95us; 25us; 25us; 28us; 34us; 31us; 60us; 32us; 62us; 35us; 68us; 36us; 43us; 37us; 52us; 39us; 56us; 41us; 97us; 47us; 24us; 48us; 23us; 49us; 42us; 50us; 41us; 0us; 16408us; 17us; 32768us; 8us; 84us; 9us; 88us; 11us; 92us; 12us; 95us; 25us; 25us; 28us; 34us; 31us; 60us; 32us; 62us; 35us; 68us; 36us; 43us; 37us; 52us; 39us; 56us; 41us; 97us; 47us; 24us; 48us; 23us; 49us; 42us; 50us; 41us; 0us; 16409us; 17us; 32768us; 8us; 84us; 9us; 88us; 11us; 92us; 12us; 95us; 25us; 25us; 28us; 34us; 31us; 60us; 32us; 62us; 35us; 68us; 36us; 43us; 37us; 52us; 39us; 56us; 41us; 97us; 47us; 24us; 48us; 23us; 49us; 42us; 50us; 41us; 0us; 16410us; 0us; 16411us; 17us; 32768us; 8us; 84us; 9us; 88us; 11us; 92us; 12us; 95us; 25us; 25us; 28us; 34us; 31us; 60us; 32us; 62us; 35us; 68us; 36us; 43us; 37us; 52us; 39us; 56us; 41us; 97us; 47us; 24us; 48us; 23us; 49us; 42us; 50us; 41us; 1us; 32768us; 26us; 67us; 0us; 16412us; 1us; 32768us; 25us; 69us; 4us; 32768us; 0us; 122us; 13us; 139us; 25us; 124us; 49us; 141us; 5us; 32768us; 1us; 136us; 10us; 134us; 21us; 137us; 24us; 138us; 33us; 71us; 4us; 32768us; 0us; 122us; 13us; 139us; 25us; 124us; 49us; 141us; 5us; 32768us; 1us; 136us; 10us; 134us; 21us; 137us; 24us; 138us; 26us; 73us; 17us; 32768us; 8us; 84us; 9us; 88us; 11us; 92us; 12us; 95us; 25us; 25us; 28us; 34us; 31us; 60us; 32us; 62us; 35us; 68us; 36us; 43us; 37us; 52us; 39us; 56us; 41us; 97us; 47us; 24us; 48us; 23us; 49us; 42us; 50us; 41us; 1us; 32768us; 34us; 75us; 1us; 32768us; 8us; 76us; 1us; 32768us; 49us; 77us; 1us; 32768us; 10us; 78us; 17us; 32768us; 8us; 84us; 9us; 88us; 11us; 92us; 12us; 95us; 25us; 25us; 28us; 34us; 31us; 60us; 32us; 62us; 35us; 68us; 36us; 43us; 37us; 52us; 39us; 56us; 41us; 97us; 47us; 24us; 48us; 23us; 49us; 42us; 50us; 41us; 1us; 32768us; 9us; 80us; 1us; 32768us; 49us; 81us; 1us; 32768us; 10us; 82us; 17us; 32768us; 8us; 84us; 9us; 88us; 11us; 92us; 12us; 95us; 25us; 25us; 28us; 34us; 31us; 60us; 32us; 62us; 35us; 68us; 36us; 43us; 37us; 52us; 39us; 56us; 41us; 97us; 47us; 24us; 48us; 23us; 49us; 42us; 50us; 41us; 0us; 16413us; 4us; 32768us; 0us; 122us; 13us; 139us; 25us; 124us; 49us; 141us; 8us; 32768us; 0us; 122us; 1us; 136us; 10us; 134us; 13us; 139us; 21us; 137us; 24us; 138us; 25us; 124us; 49us; 141us; 21us; 32768us; 1us; 136us; 8us; 84us; 9us; 88us; 10us; 134us; 11us; 92us; 12us; 95us; 21us; 137us; 24us; 138us; 25us; 25us; 28us; 34us; 31us; 60us; 32us; 62us; 35us; 68us; 36us; 43us; 37us; 52us; 39us; 56us; 41us; 97us; 47us; 24us; 48us; 23us; 49us; 42us; 50us; 41us; 0us; 16414us; 4us; 32768us; 0us; 122us; 13us; 139us; 25us; 124us; 49us; 141us; 8us; 32768us; 0us; 122us; 1us; 136us; 10us; 134us; 13us; 139us; 21us; 137us; 24us; 138us; 25us; 124us; 49us; 141us; 21us; 32768us; 1us; 136us; 8us; 84us; 9us; 88us; 10us; 134us; 11us; 92us; 12us; 95us; 21us; 137us; 24us; 138us; 25us; 25us; 28us; 34us; 31us; 60us; 32us; 62us; 35us; 68us; 36us; 43us; 37us; 52us; 39us; 56us; 41us; 97us; 47us; 24us; 48us; 23us; 49us; 42us; 50us; 41us; 0us; 16415us; 4us; 32768us; 21us; 116us; 22us; 118us; 23us; 121us; 24us; 119us; 17us; 32768us; 8us; 84us; 9us; 88us; 11us; 92us; 12us; 95us; 25us; 25us; 28us; 34us; 31us; 60us; 32us; 62us; 35us; 68us; 36us; 43us; 37us; 52us; 39us; 56us; 41us; 97us; 47us; 24us; 48us; 23us; 49us; 42us; 50us; 41us; 0us; 16416us; 17us; 32768us; 8us; 84us; 9us; 88us; 11us; 92us; 12us; 95us; 25us; 25us; 28us; 34us; 31us; 60us; 32us; 62us; 35us; 68us; 36us; 43us; 37us; 52us; 39us; 56us; 41us; 97us; 47us; 24us; 48us; 23us; 49us; 42us; 50us; 41us; 0us; 16417us; 17us; 32768us; 8us; 84us; 9us; 88us; 11us; 92us; 12us; 95us; 25us; 25us; 28us; 34us; 31us; 60us; 32us; 62us; 35us; 68us; 36us; 43us; 37us; 52us; 39us; 56us; 41us; 97us; 47us; 24us; 48us; 23us; 49us; 42us; 50us; 41us; 0us; 16418us; 1us; 32768us; 49us; 100us; 1us; 32768us; 13us; 101us; 1us; 32768us; 46us; 102us; 17us; 32768us; 8us; 84us; 9us; 88us; 11us; 92us; 12us; 95us; 25us; 25us; 28us; 34us; 31us; 60us; 32us; 62us; 35us; 68us; 36us; 43us; 37us; 52us; 39us; 56us; 41us; 97us; 47us; 24us; 48us; 23us; 49us; 42us; 50us; 41us; 1us; 32768us; 27us; 104us; 17us; 32768us; 8us; 84us; 9us; 88us; 11us; 92us; 12us; 95us; 25us; 25us; 28us; 34us; 31us; 60us; 32us; 62us; 35us; 68us; 36us; 43us; 37us; 52us; 39us; 56us; 41us; 97us; 47us; 24us; 48us; 23us; 49us; 42us; 50us; 41us; 1us; 32768us; 29us; 106us; 0us; 16419us; 1us; 32768us; 49us; 108us; 1us; 32768us; 49us; 109us; 1us; 32768us; 49us; 110us; 1us; 32768us; 46us; 111us; 17us; 32768us; 8us; 84us; 9us; 88us; 11us; 92us; 12us; 95us; 25us; 25us; 28us; 34us; 31us; 60us; 32us; 62us; 35us; 68us; 36us; 43us; 37us; 52us; 39us; 56us; 41us; 97us; 47us; 24us; 48us; 23us; 49us; 42us; 50us; 41us; 1us; 32768us; 27us; 113us; 17us; 32768us; 8us; 84us; 9us; 88us; 11us; 92us; 12us; 95us; 25us; 25us; 28us; 34us; 31us; 60us; 32us; 62us; 35us; 68us; 36us; 43us; 37us; 52us; 39us; 56us; 41us; 97us; 47us; 24us; 48us; 23us; 49us; 42us; 50us; 41us; 1us; 32768us; 29us; 115us; 0us; 16420us; 0us; 16421us; 4us; 16421us; 0us; 122us; 13us; 139us; 25us; 124us; 49us; 141us; 0us; 16422us; 0us; 16423us; 4us; 16423us; 0us; 122us; 13us; 139us; 25us; 124us; 49us; 141us; 0us; 16424us; 1us; 32768us; 49us; 123us; 0us; 16425us; 4us; 32768us; 0us; 122us; 13us; 139us; 25us; 124us; 49us; 141us; 7us; 32768us; 1us; 136us; 10us; 134us; 21us; 117us; 22us; 118us; 23us; 121us; 24us; 120us; 26us; 128us; 1us; 32768us; 26us; 127us; 0us; 16426us; 0us; 16427us; 4us; 16428us; 1us; 136us; 10us; 134us; 21us; 137us; 24us; 138us; 4us; 16429us; 1us; 136us; 10us; 134us; 21us; 137us; 24us; 138us; 4us; 16430us; 1us; 136us; 10us; 134us; 21us; 137us; 24us; 138us; 4us; 16431us; 1us; 136us; 10us; 134us; 21us; 137us; 24us; 138us; 5us; 32768us; 1us; 136us; 10us; 134us; 13us; 140us; 21us; 137us; 24us; 138us; 4us; 32768us; 21us; 116us; 22us; 118us; 23us; 121us; 24us; 119us; 4us; 32768us; 0us; 122us; 13us; 139us; 25us; 124us; 49us; 141us; 4us; 32768us; 0us; 122us; 13us; 139us; 25us; 124us; 49us; 141us; 4us; 32768us; 0us; 122us; 13us; 139us; 25us; 124us; 49us; 141us; 4us; 32768us; 0us; 122us; 13us; 139us; 25us; 124us; 49us; 141us; 4us; 32768us; 0us; 122us; 13us; 139us; 25us; 124us; 49us; 141us; 0us; 16432us; 0us; 16433us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 5us; 10us; 29us; 30us; 32us; 35us; 53us; 54us; 55us; 57us; 62us; 68us; 69us; 71us; 72us; 73us; 74us; 75us; 76us; 77us; 96us; 97us; 99us; 100us; 101us; 121us; 126us; 128us; 130us; 135us; 141us; 159us; 161us; 162us; 166us; 168us; 186us; 188us; 206us; 208us; 209us; 210us; 211us; 216us; 221us; 223us; 225us; 229us; 231us; 249us; 251us; 252us; 257us; 279us; 297us; 298us; 316us; 334us; 352us; 353us; 371us; 372us; 390us; 391us; 392us; 410us; 412us; 413us; 415us; 420us; 426us; 431us; 437us; 455us; 457us; 459us; 461us; 463us; 481us; 483us; 485us; 487us; 505us; 506us; 511us; 520us; 542us; 543us; 548us; 557us; 579us; 580us; 585us; 603us; 604us; 622us; 623us; 641us; 642us; 644us; 646us; 648us; 666us; 668us; 686us; 688us; 689us; 691us; 693us; 695us; 697us; 715us; 717us; 735us; 737us; 738us; 739us; 744us; 745us; 746us; 751us; 752us; 754us; 755us; 760us; 768us; 770us; 771us; 772us; 777us; 782us; 787us; 792us; 798us; 803us; 808us; 813us; 818us; 823us; 828us; 829us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 1us; 4us; 1us; 4us; 3us; 1us; 1us; 1us; 1us; 1us; 1us; 3us; 2us; 1us; 1us; 1us; 9us; 7us; 1us; 1us; 2us; 8us; 4us; 4us; 2us; 2us; 3us; 5us; 16us; 4us; 4us; 3us; 2us; 2us; 9us; 10us; 1us; 1us; 1us; 1us; 2us; 4us; 3us; 4us; 3us; 3us; 3us; 3us; 1us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 2us; 2us; 3us; 4us; 4us; 5us; 5us; 5us; 6us; 7us; 7us; 8us; 8us; 9us; 9us; 9us; 9us; 9us; 9us; 9us; 9us; 9us; 9us; 9us; 9us; 9us; 9us; 9us; 9us; 9us; 9us; 9us; 9us; 9us; 9us; 10us; 10us; 10us; 10us; 11us; 11us; 11us; 11us; 11us; 11us; 11us; 11us; 11us; |]
let _fsyacc_immediateActions = [|65535us; 65535us; 65535us; 49152us; 65535us; 65535us; 65535us; 16386us; 16387us; 65535us; 65535us; 65535us; 16388us; 65535us; 16389us; 16390us; 16391us; 16392us; 16393us; 16394us; 65535us; 16397us; 65535us; 16399us; 16400us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16401us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16402us; 16403us; 16404us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16406us; 65535us; 65535us; 65535us; 16407us; 65535us; 65535us; 65535us; 16408us; 65535us; 16409us; 65535us; 16410us; 16411us; 65535us; 65535us; 16412us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16413us; 65535us; 65535us; 65535us; 16414us; 65535us; 65535us; 65535us; 16415us; 65535us; 65535us; 16416us; 65535us; 16417us; 65535us; 16418us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16419us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16420us; 16421us; 65535us; 16422us; 16423us; 65535us; 16424us; 65535us; 16425us; 65535us; 65535us; 65535us; 16426us; 16427us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16432us; 16433us; |]
let _fsyacc_reductions ()  =    [| 
# 424 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data :  Ast.Ty )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (Microsoft.FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startTy));
# 433 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data :  Ast.Prog )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (Microsoft.FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startstart));
# 442 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'TypeAliasList)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 23 "Parser.fsy"
                                                          { typeAliases = Map<string,Ty>(_2) ; exprAliases = Map.empty ;  body = _4 } 
                   )
# 23 "Parser.fsy"
                 :  Ast.Prog ));
# 454 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 24 "Parser.fsy"
                                   { typeAliases = Map.empty; exprAliases = Map.empty ;  body = _1 } 
                   )
# 24 "Parser.fsy"
                 :  Ast.Prog ));
# 465 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data :  Ast.Ty )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 26 "Parser.fsy"
                                                         (_1,_3) 
                   )
# 26 "Parser.fsy"
                 : 'TypeAlias));
# 477 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'TypeAliasList)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'TypeAlias)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 27 "Parser.fsy"
                                                                         _3 :: _1 
                   )
# 27 "Parser.fsy"
                 : 'TypeAliasList));
# 489 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'TypeAlias)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 28 "Parser.fsy"
                                                 [_1] 
                   )
# 28 "Parser.fsy"
                 : 'TypeAliasList));
# 500 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 30 "Parser.fsy"
                                               Toset 
                   )
# 30 "Parser.fsy"
                 : 'ProperKindPrime));
# 510 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 31 "Parser.fsy"
                                          Proset 
                   )
# 31 "Parser.fsy"
                 : 'ProperKindPrime));
# 520 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 32 "Parser.fsy"
                                               Semilattice 
                   )
# 32 "Parser.fsy"
                 : 'ProperKindPrime));
# 530 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'ProperKindPrime)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 34 "Parser.fsy"
                                                    KProper(Set [_1 ; Proset], parseState.ResultRange) 
                   )
# 34 "Parser.fsy"
                 : 'ProperKind));
# 541 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'ProperKind)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 36 "Parser.fsy"
                                         _1 
                   )
# 36 "Parser.fsy"
                 : 'Kind));
# 552 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'ProperKindPrime)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Kind)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 37 "Parser.fsy"
                                                           KOperator(_1,_3,parseState.ResultRange) 
                   )
# 37 "Parser.fsy"
                 : 'Kind));
# 564 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'ExprList)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 39 "Parser.fsy"
                                                App(_1,_2, parseState.ResultRange) 
                   )
# 39 "Parser.fsy"
                 : 'ExprList));
# 576 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 40 "Parser.fsy"
                                       _1 
                   )
# 40 "Parser.fsy"
                 : 'ExprList));
# 587 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : System.Int32)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 42 "Parser.fsy"
                                                        Int(_1, parseState.ResultRange) 
                   )
# 42 "Parser.fsy"
                 : 'Expr));
# 598 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : System.Double)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 43 "Parser.fsy"
                                                     Float(_1, parseState.ResultRange) 
                   )
# 43 "Parser.fsy"
                 : 'Expr));
# 609 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Scalar)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data :  Ast.Ty )) in
            let _8 = (let data = parseState.GetInput(8) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 45 "Parser.fsy"
                          Abs(_4, _6, _3, _8, parseState.ResultRange) 
                   )
# 45 "Parser.fsy"
                 : 'Expr));
# 623 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 46 "Parser.fsy"
                                                        Let(_2,_4,_6, parseState.ResultRange) 
                   )
# 46 "Parser.fsy"
                 : 'Expr));
# 636 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 47 "Parser.fsy"
                                Const(_1, parseState.ResultRange) 
                   )
# 47 "Parser.fsy"
                 : 'Expr));
# 647 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 48 "Parser.fsy"
                             Var(_1, parseState.ResultRange) 
                   )
# 48 "Parser.fsy"
                 : 'Expr));
# 658 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data :  Ast.Ty )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 49 "Parser.fsy"
                                 Bot(_2, parseState.ResultRange) 
                   )
# 49 "Parser.fsy"
                 : 'Expr));
# 669 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'ProperKind)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 50 "Parser.fsy"
                                                                        Forall(_3,_5,_7, parseState.ResultRange) 
                   )
# 50 "Parser.fsy"
                 : 'Expr));
# 682 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data :  Ast.Ty )) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 51 "Parser.fsy"
                                            Join(_2, _3, _4, parseState.ResultRange) 
                   )
# 51 "Parser.fsy"
                 : 'Expr));
# 695 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 52 "Parser.fsy"
                                              Cons(_2, _3, _4, parseState.ResultRange) 
                   )
# 52 "Parser.fsy"
                 : 'Expr));
# 708 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 53 "Parser.fsy"
                                   Fst(_2, parseState.ResultRange) 
                   )
# 53 "Parser.fsy"
                 : 'Expr));
# 719 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 54 "Parser.fsy"
                                   Snd(_2, parseState.ResultRange) 
                   )
# 54 "Parser.fsy"
                 : 'Expr));
# 730 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'ExprList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 55 "Parser.fsy"
                                                 _2 
                   )
# 55 "Parser.fsy"
                 : 'Expr));
# 741 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 56 "Parser.fsy"
                                                        Pair(_2, _4, parseState.ResultRange) 
                   )
# 56 "Parser.fsy"
                 : 'Expr));
# 753 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data :  Ast.Ty )) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data :  Ast.Ty )) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _10 = (let data = parseState.GetInput(10) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _12 = (let data = parseState.GetInput(12) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _14 = (let data = parseState.GetInput(14) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _16 = (let data = parseState.GetInput(16) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 58 "Parser.fsy"
                          Case(_3, _5, _7, _10, _12, _14, _16, parseState.ResultRange) 
                   )
# 58 "Parser.fsy"
                 : 'Expr));
# 770 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data :  Ast.Ty )) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data :  Ast.Ty )) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 59 "Parser.fsy"
                                         Inl(_2,_3,_4, parseState.ResultRange) 
                   )
# 59 "Parser.fsy"
                 : 'Expr));
# 783 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data :  Ast.Ty )) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data :  Ast.Ty )) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 60 "Parser.fsy"
                                         Inr(_2,_3,_4, parseState.ResultRange) 
                   )
# 60 "Parser.fsy"
                 : 'Expr));
# 796 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Scalar)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 61 "Parser.fsy"
                                          Cap(_2, _3, parseState.ResultRange) 
                   )
# 61 "Parser.fsy"
                 : 'Expr));
# 808 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 62 "Parser.fsy"
                                     Uncap(_2, parseState.ResultRange) 
                   )
# 62 "Parser.fsy"
                 : 'Expr));
# 819 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 63 "Parser.fsy"
                                    ISet(_2, parseState.ResultRange) 
                   )
# 63 "Parser.fsy"
                 : 'Expr));
# 830 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _8 = (let data = parseState.GetInput(8) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 64 "Parser.fsy"
                                                                  IGet(_3, _6, _8, parseState.ResultRange) 
                   )
# 64 "Parser.fsy"
                 : 'Expr));
# 843 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _9 = (let data = parseState.GetInput(9) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 65 "Parser.fsy"
                                                                   Extract(_3,_4,_5,_7,_9, parseState.ResultRange) 
                   )
# 65 "Parser.fsy"
                 : 'Expr));
# 858 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 67 "Parser.fsy"
                                            CoeffectMonotone 
                   )
# 67 "Parser.fsy"
                 : 'Scalar));
# 868 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 68 "Parser.fsy"
                                            CoeffectAntitone 
                   )
# 68 "Parser.fsy"
                 : 'Scalar));
# 878 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 69 "Parser.fsy"
                                         CoeffectRobust 
                   )
# 69 "Parser.fsy"
                 : 'Scalar));
# 888 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 70 "Parser.fsy"
                                         CoeffectAny 
                   )
# 70 "Parser.fsy"
                 : 'Scalar));
# 898 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 72 "Parser.fsy"
                                   BaseTy(_2, parseState.ResultRange) 
                   )
# 72 "Parser.fsy"
                 :  Ast.Ty ));
# 909 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data :  Ast.Ty )) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Scalar)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 73 "Parser.fsy"
                                                   Capsule(_2, _3, parseState.ResultRange) 
                   )
# 73 "Parser.fsy"
                 :  Ast.Ty ));
# 921 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data :  Ast.Ty )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 74 "Parser.fsy"
                                            _2 
                   )
# 74 "Parser.fsy"
                 :  Ast.Ty ));
# 932 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data :  Ast.Ty )) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Scalar)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data :  Ast.Ty )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 75 "Parser.fsy"
                                           FunTy(_1,_3,_4, parseState.ResultRange) 
                   )
# 75 "Parser.fsy"
                 :  Ast.Ty ));
# 945 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data :  Ast.Ty )) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data :  Ast.Ty )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 76 "Parser.fsy"
                                      Dictionary(_1,_3, parseState.ResultRange) 
                   )
# 76 "Parser.fsy"
                 :  Ast.Ty ));
# 957 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data :  Ast.Ty )) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data :  Ast.Ty )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 77 "Parser.fsy"
                                      Sum(_1,_3, parseState.ResultRange) 
                   )
# 77 "Parser.fsy"
                 :  Ast.Ty ));
# 969 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data :  Ast.Ty )) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data :  Ast.Ty )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 78 "Parser.fsy"
                                          Prod(_1,_3, parseState.ResultRange) 
                   )
# 78 "Parser.fsy"
                 :  Ast.Ty ));
# 981 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data :  Ast.Ty )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 79 "Parser.fsy"
                                        IVar(_2, parseState.ResultRange) 
                   )
# 79 "Parser.fsy"
                 :  Ast.Ty ));
# 992 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 80 "Parser.fsy"
                              TyAlias(_1, parseState.ResultRange) 
                   )
# 80 "Parser.fsy"
                 :  Ast.Ty ));
|]
# 1004 "Parser.fs"
let tables () : Microsoft.FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:Microsoft.FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 54;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let Ty lexer lexbuf :  Ast.Ty  =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))
let start lexer lexbuf :  Ast.Prog  =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 2))
